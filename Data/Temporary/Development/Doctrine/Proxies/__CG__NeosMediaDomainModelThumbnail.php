<?php

namespace Neos\Flow\Persistence\Doctrine\Proxies\__CG__\Neos\Media\Domain\Model;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Thumbnail extends \Neos\Media\Domain\Model\Thumbnail implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * {@inheritDoc}
     * @return array
     */
    public function __sleep()
    {
        $properties = array_merge(['__isInitialized__'], parent::__sleep());

        if ($this->__isInitialized__) {
            $properties = array_diff($properties, array_keys(self::$lazyPropertiesNames));
        }

        return $properties;
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Thumbnail $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function initializeObject($initializationCause)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'initializeObject', [$initializationCause]);

        return parent::initializeObject($initializationCause);
    }

    /**
     * {@inheritDoc}
     */
    public function onPostPersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onPostPersist', []);

        return parent::onPostPersist();
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalAsset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalAsset', []);

        return parent::getOriginalAsset();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfigurationValue($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfigurationValue', [$value]);

        return parent::getConfigurationValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getResource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResource', []);

        return parent::getResource();
    }

    /**
     * {@inheritDoc}
     */
    public function setResource(\Neos\Flow\ResourceManagement\PersistentResource $resource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResource', [$resource]);

        return parent::setResource($resource);
    }

    /**
     * {@inheritDoc}
     */
    public function getStaticResource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStaticResource', []);

        return parent::getStaticResource();
    }

    /**
     * {@inheritDoc}
     */
    public function setStaticResource($staticResource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStaticResource', [$staticResource]);

        return parent::setStaticResource($staticResource);
    }

    /**
     * {@inheritDoc}
     */
    public function setWidth($width)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidth', [$width]);

        return parent::setWidth($width);
    }

    /**
     * {@inheritDoc}
     */
    public function setHeight($height)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeight', [$height]);

        return parent::setHeight($height);
    }

    /**
     * {@inheritDoc}
     */
    public function setQuality($quality)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuality', [$quality]);

        return parent::setQuality($quality);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refresh', []);

        return parent::refresh();
    }

    /**
     * {@inheritDoc}
     */
    public function getWidth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidth', []);

        return parent::getWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function getHeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeight', []);

        return parent::getHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDimensions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDimensions', []);

        return parent::hasDimensions();
    }

    /**
     * {@inheritDoc}
     */
    public function getAspectRatio($respectOrientation = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAspectRatio', [$respectOrientation]);

        return parent::getAspectRatio($respectOrientation);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrientation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrientation', []);

        return parent::getOrientation();
    }

    /**
     * {@inheritDoc}
     */
    public function isOrientationSquare()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrientationSquare', []);

        return parent::isOrientationSquare();
    }

    /**
     * {@inheritDoc}
     */
    public function isOrientationLandscape()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrientationLandscape', []);

        return parent::isOrientationLandscape();
    }

    /**
     * {@inheritDoc}
     */
    public function isOrientationPortrait()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrientationPortrait', []);

        return parent::isOrientationPortrait();
    }

    /**
     * {@inheritDoc}
     */
    public function getQuality()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuality', []);

        return parent::getQuality();
    }

    /**
     * {@inheritDoc}
     */
    public function Flow_Aop_Proxy_invokeJoinPoint(\Neos\Flow\Aop\JoinPointInterface $joinPoint)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Flow_Aop_Proxy_invokeJoinPoint', [$joinPoint]);

        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

}
