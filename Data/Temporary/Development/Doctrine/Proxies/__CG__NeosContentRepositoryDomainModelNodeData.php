<?php

namespace Neos\Flow\Persistence\Doctrine\Proxies\__CG__\Neos\ContentRepository\Domain\Model;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class NodeData extends \Neos\ContentRepository\Domain\Model\NodeData implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * {@inheritDoc}
     * @return array
     */
    public function __sleep()
    {
        $properties = array_merge(['__isInitialized__'], parent::__sleep());

        if ($this->__isInitialized__) {
            $properties = array_diff($properties, array_keys(self::$lazyPropertiesNames));
        }

        return $properties;
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (NodeData $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPath($path, $recursive = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPath', [$path, $recursive]);

        return parent::setPath($path, $recursive);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getContextPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContextPath', []);

        return parent::getContextPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getDepth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepth', []);

        return parent::getDepth();
    }

    /**
     * {@inheritDoc}
     */
    public function setWorkspace(\Neos\ContentRepository\Domain\Model\Workspace $workspace = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWorkspace', [$workspace]);

        return parent::setWorkspace($workspace);
    }

    /**
     * {@inheritDoc}
     */
    public function getWorkspace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWorkspace', []);

        return parent::getWorkspace();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdentifier', []);

        return parent::getIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function setIndex($index)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIndex', [$index]);

        return parent::setIndex($index);
    }

    /**
     * {@inheritDoc}
     */
    public function getIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIndex', []);

        return parent::getIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentPath', []);

        return parent::getParentPath();
    }

    /**
     * {@inheritDoc}
     */
    public function createNodeData($name, \Neos\ContentRepository\Domain\Model\NodeType $nodeType = NULL, $identifier = NULL, \Neos\ContentRepository\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createNodeData', [$name, $nodeType, $identifier, $workspace, $dimensions]);

        return parent::createNodeData($name, $nodeType, $identifier, $workspace, $dimensions);
    }

    /**
     * {@inheritDoc}
     */
    public function createSingleNodeData($name, \Neos\ContentRepository\Domain\Model\NodeType $nodeType = NULL, $identifier = NULL, \Neos\ContentRepository\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createSingleNodeData', [$name, $nodeType, $identifier, $workspace, $dimensions]);

        return parent::createSingleNodeData($name, $nodeType, $identifier, $workspace, $dimensions);
    }

    /**
     * {@inheritDoc}
     */
    public function createNodeDataFromTemplate(\Neos\ContentRepository\Domain\Model\NodeTemplate $nodeTemplate, $nodeName = NULL, \Neos\ContentRepository\Domain\Model\Workspace $workspace = NULL, array $dimensions = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createNodeDataFromTemplate', [$nodeTemplate, $nodeName, $workspace, $dimensions]);

        return parent::createNodeDataFromTemplate($nodeTemplate, $nodeName, $workspace, $dimensions);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdentifier($identifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdentifier', [$identifier]);

        return parent::setIdentifier($identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumberOfChildNodes($nodeTypeFilter, \Neos\ContentRepository\Domain\Model\Workspace $workspace, array $dimensions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumberOfChildNodes', [$nodeTypeFilter, $workspace, $dimensions]);

        return parent::getNumberOfChildNodes($nodeTypeFilter, $workspace, $dimensions);
    }

    /**
     * {@inheritDoc}
     */
    public function remove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'remove', []);

        return parent::remove();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemoved($removed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemoved', [$removed]);

        return parent::setRemoved($removed);
    }

    /**
     * {@inheritDoc}
     */
    public function isRemoved()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRemoved', []);

        return parent::isRemoved();
    }

    /**
     * {@inheritDoc}
     */
    public function isVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVisible', []);

        return parent::isVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function isAccessible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAccessible', []);

        return parent::isAccessible();
    }

    /**
     * {@inheritDoc}
     */
    public function hasAccessRestrictions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAccessRestrictions', []);

        return parent::hasAccessRestrictions();
    }

    /**
     * {@inheritDoc}
     */
    public function getDimensions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimensions', []);

        return parent::getDimensions();
    }

    /**
     * {@inheritDoc}
     */
    public function setDimensions(array $dimensionsToBeSet)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDimensions', [$dimensionsToBeSet]);

        return parent::setDimensions($dimensionsToBeSet);
    }

    /**
     * {@inheritDoc}
     */
    public function getMovedTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMovedTo', []);

        return parent::getMovedTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setMovedTo(\Neos\ContentRepository\Domain\Model\NodeData $nodeData = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMovedTo', [$nodeData]);

        return parent::setMovedTo($nodeData);
    }

    /**
     * {@inheritDoc}
     */
    public function similarize(\Neos\ContentRepository\Domain\Model\AbstractNodeData $sourceNode, $isCopy = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'similarize', [$sourceNode, $isCopy]);

        return parent::similarize($sourceNode, $isCopy);
    }

    /**
     * {@inheritDoc}
     */
    public function getDimensionValues()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimensionValues', []);

        return parent::getDimensionValues();
    }

    /**
     * {@inheritDoc}
     */
    public function getDimensionsHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDimensionsHash', []);

        return parent::getDimensionsHash();
    }

    /**
     * {@inheritDoc}
     */
    public function matchesWorkspaceAndDimensions($workspace, array $dimensions = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'matchesWorkspaceAndDimensions', [$workspace, $dimensions]);

        return parent::matchesWorkspaceAndDimensions($workspace, $dimensions);
    }

    /**
     * {@inheritDoc}
     */
    public function isInternal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInternal', []);

        return parent::isInternal();
    }

    /**
     * {@inheritDoc}
     */
    public function move($targetPath, \Neos\ContentRepository\Domain\Model\Workspace $targetWorkspace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'move', [$targetPath, $targetWorkspace]);

        return parent::move($targetPath, $targetWorkspace);
    }

    /**
     * {@inheritDoc}
     */
    public function createShadow($path)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createShadow', [$path]);

        return parent::createShadow($path);
    }

    /**
     * {@inheritDoc}
     */
    public function ensurePropertiesIsNeverNull()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ensurePropertiesIsNeverNull', []);

        return parent::ensurePropertiesIsNeverNull();
    }

    /**
     * {@inheritDoc}
     */
    public function setProperty($propertyName, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProperty', [$propertyName, $value]);

        return parent::setProperty($propertyName, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function hasProperty($propertyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasProperty', [$propertyName]);

        return parent::hasProperty($propertyName);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperty($propertyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperty', [$propertyName]);

        return parent::getProperty($propertyName);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProperty($propertyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProperty', [$propertyName]);

        return parent::removeProperty($propertyName);
    }

    /**
     * {@inheritDoc}
     */
    public function getProperties()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProperties', []);

        return parent::getProperties();
    }

    /**
     * {@inheritDoc}
     */
    public function getPropertyNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPropertyNames', []);

        return parent::getPropertyNames();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentObject($contentObject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentObject', [$contentObject]);

        return parent::setContentObject($contentObject);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentObject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentObject', []);

        return parent::getContentObject();
    }

    /**
     * {@inheritDoc}
     */
    public function unsetContentObject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unsetContentObject', []);

        return parent::unsetContentObject();
    }

    /**
     * {@inheritDoc}
     */
    public function setNodeType(\Neos\ContentRepository\Domain\Model\NodeType $nodeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNodeType', [$nodeType]);

        return parent::setNodeType($nodeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getNodeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNodeType', []);

        return parent::getNodeType();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDateTime', []);

        return parent::getCreationDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastModificationDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastModificationDateTime', []);

        return parent::getLastModificationDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastPublicationDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastPublicationDateTime', []);

        return parent::getLastPublicationDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastPublicationDateTime(\DateTimeInterface $lastPublicationDateTime = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastPublicationDateTime', [$lastPublicationDateTime]);

        return parent::setLastPublicationDateTime($lastPublicationDateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function setHidden($hidden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHidden', [$hidden]);

        return parent::setHidden($hidden);
    }

    /**
     * {@inheritDoc}
     */
    public function isHidden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHidden', []);

        return parent::isHidden();
    }

    /**
     * {@inheritDoc}
     */
    public function setHiddenBeforeDateTime(\DateTimeInterface $dateTime = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHiddenBeforeDateTime', [$dateTime]);

        return parent::setHiddenBeforeDateTime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getHiddenBeforeDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHiddenBeforeDateTime', []);

        return parent::getHiddenBeforeDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setHiddenAfterDateTime(\DateTimeInterface $dateTime = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHiddenAfterDateTime', [$dateTime]);

        return parent::setHiddenAfterDateTime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getHiddenAfterDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHiddenAfterDateTime', []);

        return parent::getHiddenAfterDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setHiddenInIndex($hidden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHiddenInIndex', [$hidden]);

        return parent::setHiddenInIndex($hidden);
    }

    /**
     * {@inheritDoc}
     */
    public function isHiddenInIndex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHiddenInIndex', []);

        return parent::isHiddenInIndex();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessRoles(array $accessRoles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessRoles', [$accessRoles]);

        return parent::setAccessRoles($accessRoles);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessRoles', []);

        return parent::getAccessRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function Flow_Aop_Proxy_invokeJoinPoint(\Neos\Flow\Aop\JoinPointInterface $joinPoint)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Flow_Aop_Proxy_invokeJoinPoint', [$joinPoint]);

        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

}
