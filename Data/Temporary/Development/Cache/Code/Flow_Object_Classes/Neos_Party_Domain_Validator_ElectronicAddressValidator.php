<?php 

namespace Neos\Party\Domain\Validator;

/*
 * This file is part of the Neos.Party package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Validation\Validator\GenericObjectValidator;
use Neos\Flow\Validation\ValidatorResolver;
use Neos\Party\Domain\Model\ElectronicAddress;

/**
 * An electronic address validator
 *
 */
class ElectronicAddressValidator_Original extends GenericObjectValidator
{
    /**
     * @var ValidatorResolver
     */
    protected $validatorResolver;

    /**
     * Injects the validator resolver
     *
     * @param ValidatorResolver $validatorResolver
     * @return void
     */
    public function injectValidatorResolver(ValidatorResolver $validatorResolver): void
    {
        $this->validatorResolver = $validatorResolver;
    }

    /**
     * Checks if the given value is a valid electronic address according to its type.
     *
     * If at least one error occurred, the result is FALSE and any errors can
     * be retrieved through the getErrors() method.
     *
     * @param mixed $value The value that should be validated
     * @return void
     * @throws \Neos\Flow\Validation\Exception\InvalidValidationConfigurationException
     * @throws \Neos\Flow\Validation\Exception\NoSuchValidatorException
     */
    public function isValid($value)
    {
        if ($value instanceof ElectronicAddress) {
            $addressType = $value->getType();
            switch ($addressType) {
                case 'Email':
                    $addressValidator = $this->validatorResolver->createValidator('EmailAddress');
                    break;
                default:
                    $addressValidator = $this->validatorResolver->createValidator('Neos.Party:' . $addressType . 'Address');
            }
            if ($addressValidator === null) {
                $this->addError('No validator found for electronic address of type "' . $addressType . '".', 1268676030);
            } else {
                $result = $addressValidator->validate($value->getIdentifier());
                if ($result->hasErrors()) {
                    foreach ($result->getErrors() as $error) {
                        $this->addError($error->getMessage(), $error->getCode());
                    }
                }
            }
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * An electronic address validator
 *
 * @codeCoverageIgnore
 */
class ElectronicAddressValidator extends ElectronicAddressValidator_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the validator and sets validation options
     *
     * @param array $options Options for the validator
     * @throws InvalidValidationOptionsException if unsupported options are found
     * @api
     */
    public function __construct()
    {
        $arguments = func_get_args();
        parent::__construct(...$arguments);
        if ('Neos\Party\Domain\Validator\ElectronicAddressValidator' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'validatorResolver' => 'Neos\\Flow\\Validation\\ValidatorResolver',
  'supportedOptions' => 'array',
  'propertyValidators' => 'array',
  'validatedInstancesContainer' => '\\SplObjectStorage',
  'acceptsEmptyValues' => 'boolean',
  'options' => 'array',
  'resultStack' => 'array<Neos\\Error\\Messages\\Result>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectValidatorResolver(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Validation\ValidatorResolver'));
        $this->Flow_Injected_Properties = array (
  0 => 'validatorResolver',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Party/Classes/Domain/Validator/ElectronicAddressValidator.php
#