<?php 
declare(strict_types=1);

namespace Neos\Fusion\Form\Runtime\Helper;

/*
 * This file is part of the Neos.Fusion.Form package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Error\Messages\Result;
use Neos\Fusion\Form\Runtime\Domain\SchemaInterface;

class ArrayOfSchemaDefinition_Original extends SchemaDefinition
{
    /**
     * @var SchemaInterface|null
     */
    protected $itemSchema;

    /**
     * ArrayOfSchemaDefinition constructor.
     * @param SchemaInterface|null $itemSchema
     * @param mixed[] $validators
     * @param mixed[] $validatorOptions
     */
    public function __construct(SchemaInterface $itemSchema = null, array $validators = [], array $validatorOptions = [])
    {
        parent::__construct('array', $validators, $validatorOptions);
        $this->itemSchema = $itemSchema;
    }

    /**
     * @param mixed $data
     * @return Result
     * @throws \Neos\Flow\Validation\Exception\InvalidValidationConfigurationException
     * @throws \Neos\Flow\Validation\Exception\NoSuchValidatorException
     */
    public function validate($data): Result
    {
        // validate array
        $result = parent::validate($data);
        // validate keys with itemSchema
        if ($this->itemSchema) {
            foreach ($data as $key => $value) {
                $result->forProperty((string)$key)->merge($this->itemSchema->validate($value));
            }
        }
        return $result;
    }

    /**
     * @param mixed $data
     * @return mixed|\Neos\Error\Messages\Error|null
     * @throws \Neos\Flow\Property\Exception
     * @throws \Neos\Flow\Security\Exception
     */
    public function convert($data)
    {
        // convert to array
        $arrayData = parent::convert($data);
        // convert keys with itemSchema
        if ($this->itemSchema) {
            $result = [];
            foreach ($arrayData as $key => $value) {
                $result[$key] = $this->itemSchema->convert($value);
            }
            return $result;
        } else {
            return $arrayData;
        }
    }
}

#
# Start of Flow generated Proxy code
#

class ArrayOfSchemaDefinition extends ArrayOfSchemaDefinition_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * ArrayOfSchemaDefinition constructor.
     * @param SchemaInterface|null $itemSchema
     * @param mixed[] $validators
     * @param mixed[] $validatorOptions
     */
    public function __construct()
    {
        $arguments = func_get_args();
        parent::__construct(...$arguments);
        if ('Neos\Fusion\Form\Runtime\Helper\ArrayOfSchemaDefinition' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'itemSchema' => 'Neos\\Fusion\\Form\\Runtime\\Domain\\SchemaInterface|null',
  'propertyMapper' => 'Neos\\Flow\\Property\\PropertyMapper',
  'propertyMappingConfiguration' => 'Neos\\Flow\\Property\\PropertyMappingConfiguration',
  'validatorResolver' => 'Neos\\Flow\\Validation\\ValidatorResolver',
  'targetType' => 'string',
  'validators' => 'array<mixed>',
  'typeConverterOptions' => 'array<mixed>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Property\PropertyMapper', 'Neos\Flow\Property\PropertyMapper', 'propertyMapper', '2ab4a1ce2ee31715713d0f207f0ac637', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Property\PropertyMapper'); });
        $this->propertyMappingConfiguration = new \Neos\Flow\Property\PropertyMappingConfiguration();
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Validation\ValidatorResolver', 'Neos\Flow\Validation\ValidatorResolver', 'validatorResolver', 'e992f50de62d81bfe770d5c5f1242621', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Validation\ValidatorResolver'); });
        $this->Flow_Injected_Properties = array (
  0 => 'propertyMapper',
  1 => 'propertyMappingConfiguration',
  2 => 'validatorResolver',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Fusion.Form/Classes/Runtime/Helper/ArrayOfSchemaDefinition.php
#