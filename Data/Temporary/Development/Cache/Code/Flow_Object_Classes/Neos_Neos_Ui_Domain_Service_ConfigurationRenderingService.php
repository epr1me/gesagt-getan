<?php 
namespace Neos\Neos\Ui\Domain\Service;

/*
 * This file is part of the Neos.Neos.Ui package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Eel\CompilingEvaluator;
use Neos\Eel\Utility;
use Neos\Flow\Annotations as Flow;

/**
 * @Flow\Scope("singleton")
 */
class ConfigurationRenderingService_Original
{

    /**
     * @Flow\Inject(lazy=false)
     * @var CompilingEvaluator
     */
    protected $eelEvaluator;

    /**
     * @Flow\InjectConfiguration(package="Neos.Fusion", path="defaultContext")
     * @var array
     */
    protected $fusionDefaultEelContext;

    /**
     * @Flow\InjectConfiguration(path="configurationDefaultEelContext")
     * @var array
     */
    protected $additionalEelDefaultContext;

    /**
     * @param array $configuration
     * @param array $context
     * @return array
     * @throws \Neos\Eel\Exception
     */
    public function computeConfiguration(array $configuration, array $context): array
    {
        $adjustedConfiguration = $configuration;
        $this->computeConfigurationInternally($adjustedConfiguration, $context);

        return $adjustedConfiguration;
    }

    /**
     * @param array $adjustedConfiguration
     * @param array $context
     * @throws \Neos\Eel\Exception
     */
    protected function computeConfigurationInternally(array &$adjustedConfiguration, array $context)
    {
        foreach ($adjustedConfiguration as $key => &$value) {
            if (is_array($value)) {
                $this->computeConfigurationInternally($value, $context);
            } elseif (is_string($value) && substr($value, 0, 2) === '${' && substr($value, -1) === '}') {
                $value = Utility::evaluateEelExpression(
                    $value,
                    $this->eelEvaluator,
                    $context,
                    array_merge($this->fusionDefaultEelContext, $this->additionalEelDefaultContext)
                );
            }
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ConfigurationRenderingService extends ConfigurationRenderingService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Neos\Ui\Domain\Service\ConfigurationRenderingService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Ui\Domain\Service\ConfigurationRenderingService', $this);
        if ('Neos\Neos\Ui\Domain\Service\ConfigurationRenderingService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'eelEvaluator' => 'Neos\\Eel\\CompilingEvaluator',
  'fusionDefaultEelContext' => 'array',
  'additionalEelDefaultContext' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Neos\Ui\Domain\Service\ConfigurationRenderingService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Ui\Domain\Service\ConfigurationRenderingService', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->eelEvaluator = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Eel\CompilingEvaluator');
        $this->fusionDefaultEelContext = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Fusion.defaultContext');
        $this->additionalEelDefaultContext = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Neos.Ui.configurationDefaultEelContext');
        $this->Flow_Injected_Properties = array (
  0 => 'eelEvaluator',
  1 => 'fusionDefaultEelContext',
  2 => 'additionalEelDefaultContext',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Neos.Ui/Classes/Domain/Service/ConfigurationRenderingService.php
#