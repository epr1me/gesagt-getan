<?php 
namespace Neos\Form\Utility;

/*
 * This file is part of the Neos.Form package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Form\Exception\TypeDefinitionNotFoundException;

/**
 * Merges configuration based on the "superTypes" property of a so-called "type definition".
 *
 * @internal
 */
class SupertypeResolver_Original
{
    /**
     * @var array
     */
    protected $configuration;

    /**
     * @var array
     */
    protected $settings;

    /**
     * @param array $configuration
     */
    public function __construct(array $configuration)
    {
        $this->configuration = $configuration;
    }

    /**
     * @param array $settings
     * @internal
     */
    public function injectSettings(array $settings)
    {
        $this->settings = $settings;
    }

    /**
     *
     * @param string $type
     * @param boolean $showHiddenProperties if TRUE, the hidden properties are shown as configured in settings "supertypeResolver.hiddenProperties" are shown as well. FALSE by default
     * @return array
     * @throws TypeDefinitionNotFoundException if a type definition was not found
     * @internal
     */
    public function getMergedTypeDefinition($type, $showHiddenProperties = false)
    {
        if (!isset($this->configuration[$type])) {
            throw new TypeDefinitionNotFoundException(sprintf('Type "%s" not found. Probably some configuration is missing.', $type), 1325686909);
        }
        $mergedTypeDefinition = [];
        if (isset($this->configuration[$type]['superTypes'])) {
            foreach ($this->configuration[$type]['superTypes'] as $superTypeName => $enabled) {
                // Skip unset node types
                if ($enabled === false || $enabled === null) {
                    continue;
                }

                // Make this setting backwards compatible with old array schema (deprecated since 2.0)
                if (!is_bool($enabled)) {
                    $superTypeName = $enabled;
                }

                $mergedTypeDefinition = \Neos\Utility\Arrays::arrayMergeRecursiveOverrule($mergedTypeDefinition, $this->getMergedTypeDefinition($superTypeName, $showHiddenProperties));
            }
        }
        $mergedTypeDefinition = \Neos\Utility\Arrays::arrayMergeRecursiveOverrule($mergedTypeDefinition, $this->configuration[$type]);
        unset($mergedTypeDefinition['superTypes']);

        if ($showHiddenProperties === false && isset($this->settings['supertypeResolver']['hiddenProperties']) && is_array($this->settings['supertypeResolver']['hiddenProperties'])) {
            foreach ($this->settings['supertypeResolver']['hiddenProperties'] as $propertyName) {
                unset($mergedTypeDefinition[$propertyName]);
            }
        }

        return $mergedTypeDefinition;
    }

    /**
     * @param boolean $showHiddenProperties  if TRUE, the hidden properties are shown as configured in settings "supertypeResolver.hiddenProperties" are shown as well. FALSE by default
     * @return array associative array of all completely merged type definitions.
     * @internal
     */
    public function getCompleteMergedTypeDefinition($showHiddenProperties = false)
    {
        $configuration = [];
        foreach (array_keys($this->configuration) as $type) {
            $configuration[$type] = $this->getMergedTypeDefinition($type, $showHiddenProperties);
        }
        return $configuration;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Merges configuration based on the "superTypes" property of a so-called "type definition".
 *
 * @internal
 * @codeCoverageIgnore
 */
class SupertypeResolver extends SupertypeResolver_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * @param array $configuration
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $configuration in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
        if ('Neos\Form\Utility\SupertypeResolver' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'configuration' => 'array',
  'settings' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectSettings(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Form'));
        $this->Flow_Injected_Properties = array (
  0 => 'settings',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Form/Classes/Utility/SupertypeResolver.php
#