<?php 
namespace Neos\Neos\Aspects;

/*
 * This file is part of the Neos.Neos package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Aop\JoinPointInterface;
use Neos\Flow\Utility\Environment;
use Neos\Neos\Domain\Model\Domain;
use Neos\Neos\Domain\Model\Site;

/**
 * Aspect to memoize values from SiteRepository without the overhead of a query cache
 *
 * @Flow\Scope("singleton")
 * @Flow\Aspect
 */
class SiteRepositoryCachingAspect_Original
{
    /**
     * @Flow\Inject
     * @var Environment
     */
    protected $environment;

    /**
     * @var Site|boolean
     */
    protected $firstOnlineSite = false;

    /**
     * @var Domain|boolean
     */
    protected $domainForActiveRequest = false;

    /**
     * @Flow\Around("method(Neos\Neos\Domain\Repository\SiteRepository->findFirstOnline())")
     * @param JoinPointInterface $joinPoint The current join point
     * @return mixed
     */
    public function cacheFirstOnlineSite(JoinPointInterface $joinPoint)
    {
        if ($this->firstOnlineSite === false || $this->environment->getContext()->isTesting()) {
            $site = $joinPoint->getAdviceChain()->proceed($joinPoint);
            $this->firstOnlineSite = $site;
        }
        return $this->firstOnlineSite;
    }

    /**
     * @Flow\Around("method(Neos\Neos\Domain\Repository\DomainRepository->findOneByActiveRequest())")
     * @param JoinPointInterface $joinPoint The current join point
     * @return mixed
     */
    public function cacheDomainForActiveRequest(JoinPointInterface $joinPoint)
    {
        if ($this->domainForActiveRequest === false || $this->environment->getContext()->isTesting()) {
            $domain = $joinPoint->getAdviceChain()->proceed($joinPoint);
            $this->domainForActiveRequest = $domain;
        }
        return $this->domainForActiveRequest;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Aspect to memoize values from SiteRepository without the overhead of a query cache
 *
 * @Flow\Scope("singleton")
 * @Flow\Aspect
 * @codeCoverageIgnore
 */
class SiteRepositoryCachingAspect extends SiteRepositoryCachingAspect_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Neos\Aspects\SiteRepositoryCachingAspect') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Aspects\SiteRepositoryCachingAspect', $this);
        if ('Neos\Neos\Aspects\SiteRepositoryCachingAspect' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'environment' => 'Neos\\Flow\\Utility\\Environment',
  'firstOnlineSite' => 'Site|boolean',
  'domainForActiveRequest' => 'Domain|boolean',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Neos\Aspects\SiteRepositoryCachingAspect') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Aspects\SiteRepositoryCachingAspect', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Utility\Environment', 'Neos\Flow\Utility\Environment', 'environment', 'cce2af5ed9f80b598c497d98c35a5eb3', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Utility\Environment'); });
        $this->Flow_Injected_Properties = array (
  0 => 'environment',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Neos/Classes/Aspects/SiteRepositoryCachingAspect.php
#