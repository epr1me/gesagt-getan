<?php 
namespace Neos\Flow\Security\Authentication;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\ObjectManagement\ObjectManagerInterface;
use Neos\Flow\Security\Exception\NoAuthenticationTokenFoundException;

/**
 * The authentication token resolver. It resolves the class name of a authentication token based on names.
 *
 * @Flow\Scope("singleton")
 */
class AuthenticationTokenResolver_Original
{
    /**
     * @var ObjectManagerInterface
     */
    protected $objectManager;

    /**
     * Constructor.
     *
     * @param ObjectManagerInterface $objectManager The object manager
     */
    public function __construct(ObjectManagerInterface $objectManager)
    {
        $this->objectManager = $objectManager;
    }

    /**
     * Resolves the class name of an authentication token. If a valid token class name is given, it is just returned.
     *
     * @param string $tokenName The (short) name of the token
     * @return string The object name of the authentication token
     * @throws NoAuthenticationTokenFoundException
     */
    public function resolveTokenClass(string $tokenName): string
    {
        $className = $this->objectManager->getClassNameByObjectName($tokenName);
        if ($className !== false) {
            return $className;
        }

        $className = $this->objectManager->getClassNameByObjectName('Neos\Flow\Security\Authentication\Token\\' . $tokenName);
        if ($className !== false) {
            return $className;
        }

        throw new NoAuthenticationTokenFoundException('An authentication token with the name "' . $tokenName . '" could not be resolved.', 1217154134);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * The authentication token resolver. It resolves the class name of a authentication token based on names.
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class AuthenticationTokenResolver extends AuthenticationTokenResolver_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructor.
     *
     * @param ObjectManagerInterface $objectManager The object manager
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'Neos\Flow\Security\Authentication\AuthenticationTokenResolver') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\Authentication\AuthenticationTokenResolver', $this);

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $objectManager in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Flow\Security\Authentication\AuthenticationTokenResolver') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\Authentication\AuthenticationTokenResolver', $this);

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Security/Authentication/AuthenticationTokenResolver.php
#