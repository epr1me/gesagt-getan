<?php 
namespace Neos\ContentRepository\Domain\Model\IntraDimension;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

/**
 * The content dimension domain model
 */
class ContentDimension_Original
{
    /**
     * @var string
     */
    protected $name;

    /**
     * @var string
     */
    protected $label;

    /**
     * @var array
     */
    protected $valueRegistry = [];

    /**
     * @var int
     */
    protected $depth = 0;

    /**
     * @param string $name
     * @param null $label
     */
    public function __construct(string $name, $label = null)
    {
        $this->name = $name;
        $this->label = $label ?: $name;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * @param string $value
     * @param ContentDimensionValue|null $fallback
     * @return ContentDimensionValue
     */
    public function createValue(string $value, ContentDimensionValue $fallback = null): ContentDimensionValue
    {
        $contentDimensionValue = new ContentDimensionValue($value, $fallback);
        if ($fallback) {
            $fallback->registerVariant($contentDimensionValue);
            $this->depth = max($this->depth, $contentDimensionValue->getDepth());
        }
        $this->valueRegistry[$contentDimensionValue->getValue()] = $contentDimensionValue;

        return $contentDimensionValue;
    }

    /**
     * @return array|ContentDimensionValue[]
     */
    public function getValues(): array
    {
        return $this->valueRegistry;
    }

    /**
     * @param string $value
     * @return ContentDimensionValue|null
     */
    public function getValue(string $value)
    {
        return $this->valueRegistry[$value] ?? null;
    }

    /**
     * @return array|ContentDimensionValue[]
     */
    public function getRootValues(): array
    {
        return array_filter($this->valueRegistry, function (ContentDimensionValue $dimensionValue) {
            return $dimensionValue->getDepth() === 0;
        });
    }

    /**
     * @return int
     */
    public function getDepth(): int
    {
        return $this->depth;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * The content dimension domain model
 * @codeCoverageIgnore
 */
class ContentDimension extends ContentDimension_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     *
     * @param string $name
     * @param null $label
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $name in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'name' => 'string',
  'label' => 'string',
  'valueRegistry' => 'array',
  'depth' => 'integer',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Domain/Model/IntraDimension/ContentDimension.php
#