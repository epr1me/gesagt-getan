<?php 
namespace Neos\ContentRepository\Eel\FlowQueryOperations;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\ContentRepository\Domain\Projection\Content\TraversableNodeInterface;
use Neos\Eel\FlowQuery\FlowQuery;
use Neos\Eel\FlowQuery\Operations\AbstractOperation;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Utility\Now;
use Neos\ContentRepository\Domain\Model\NodeInterface;

/**
 * "cacheLifetime" operation working on ContentRepository nodes. Will get the minimum of all allowed cache lifetimes for the
 * nodes in the current FlowQuery context. This means it will evaluate to the nearest future value of the
 * hiddenBeforeDateTime or hiddenAfterDateTime properties of all nodes in the context. If none are set or all values
 * are in the past it will evaluate to NULL.
 *
 * To include already hidden nodes (with a hiddenBeforeDateTime value in the future) in the result, also invisible nodes
 * have to be included in the context. This can be achieved using the "context" operation before fetching child nodes.
 *
 * Example:
 *
 * 	q(node).context({'invisibleContentShown': true}).children().cacheLifetime()
 *
 */
class CacheLifetimeOperation_Original extends AbstractOperation
{
    /**
     * {@inheritdoc}
     *
     * @var string
     */
    protected static $shortName = 'cacheLifetime';

    /**
     * {@inheritdoc}
     *
     * @var integer
     */
    protected static $priority = 1;

    /**
     * {@inheritdoc}
     *
     * @var boolean
     */
    protected static $final = true;

    /**
     * @Flow\Inject(lazy=false)
     * @var Now
     */
    protected $now;

    /**
     * {@inheritdoc}
     *
     * @param array (or array-like object) $context onto which this operation should be applied
     * @return boolean true if the operation can be applied onto the $context, false otherwise
     */
    public function canEvaluate($context)
    {
        return count($context) === 0 || (isset($context[0]) && ($context[0] instanceof TraversableNodeInterface));
    }

    /**
     * {@inheritdoc}
     *
     * @param FlowQuery $flowQuery The FlowQuery object
     * @param array $arguments None
     * @return integer The cache lifetime in seconds or NULL if either no content collection was given or no child node had a "hiddenBeforeDateTime" or "hiddenAfterDateTime" property set
     */
    public function evaluate(FlowQuery $flowQuery, array $arguments)
    {
        $minimumDateTime = null;
        foreach ($flowQuery->getContext() as $contextNode) {
            if ($contextNode instanceof NodeInterface) {
                $hiddenBeforeDateTime = $contextNode->getHiddenBeforeDateTime();
                if ($hiddenBeforeDateTime !== null && $hiddenBeforeDateTime > $this->now && ($minimumDateTime === null || $hiddenBeforeDateTime < $minimumDateTime)) {
                    $minimumDateTime = $hiddenBeforeDateTime;
                }
                $hiddenAfterDateTime = $contextNode->getHiddenAfterDateTime();
                if ($hiddenAfterDateTime !== null && $hiddenAfterDateTime > $this->now && ($minimumDateTime === null || $hiddenAfterDateTime < $minimumDateTime)) {
                    $minimumDateTime = $hiddenAfterDateTime;
                }
            }
        }

        if ($minimumDateTime !== null) {
            $maximumLifetime = $minimumDateTime->getTimestamp() - $this->now->getTimestamp();
            if ($maximumLifetime > 0) {
                return $maximumLifetime;
            }
        }
        return null;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * "cacheLifetime" operation working on ContentRepository nodes. Will get the minimum of all allowed cache lifetimes for the
 * nodes in the current FlowQuery context. This means it will evaluate to the nearest future value of the
 * hiddenBeforeDateTime or hiddenAfterDateTime properties of all nodes in the context. If none are set or all values
 * are in the past it will evaluate to NULL.
 *
 * To include already hidden nodes (with a hiddenBeforeDateTime value in the future) in the result, also invisible nodes
 * have to be included in the context. This can be achieved using the "context" operation before fetching child nodes.
 *
 * Example:
 *
 * 	q(node).context({'invisibleContentShown': true}).children().cacheLifetime()
 *
 * @codeCoverageIgnore
 */
class CacheLifetimeOperation extends CacheLifetimeOperation_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\ContentRepository\Eel\FlowQueryOperations\CacheLifetimeOperation' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'shortName' => 'string',
  'priority' => 'integer',
  'final' => 'boolean',
  'now' => 'Neos\\Flow\\Utility\\Now',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->now = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Utility\Now');
        $this->Flow_Injected_Properties = array (
  0 => 'now',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Eel/FlowQueryOperations/CacheLifetimeOperation.php
#