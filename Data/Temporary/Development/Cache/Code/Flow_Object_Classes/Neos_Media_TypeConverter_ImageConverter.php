<?php 
namespace Neos\Media\TypeConverter;

/*
 * This file is part of the Neos.Media package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Media\Domain\Model\Image;

/**
 * This converter transforms to \Neos\Media\Domain\Model\Image objects.
 *
 * @api
 * @Flow\Scope("singleton")
 */
class ImageConverter_Original extends ImageInterfaceConverter
{
    /**
     * @var string
     */
    protected $targetType = Image::class;

    /**
     * @var integer
     */
    protected $priority = 2;
}

#
# Start of Flow generated Proxy code
#
/**
 * This converter transforms to \Neos\Media\Domain\Model\Image objects.
 *
 * @api
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ImageConverter extends ImageConverter_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Media\TypeConverter\ImageConverter') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\TypeConverter\ImageConverter', $this);
        if ('Neos\Media\TypeConverter\ImageConverter' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'targetType' => 'string',
  'priority' => 'integer',
  'processingInstructionsConverter' => 'Neos\\Media\\TypeConverter\\ProcessingInstructionsConverter',
  'propertyMapper' => 'Neos\\Flow\\Property\\PropertyMapper',
  'defaultNewAssetType' => 'string',
  'sourceTypes' => 'array',
  'assetRepository' => 'Neos\\Media\\Domain\\Repository\\AssetRepository',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'assetModelMappingStrategy' => 'Neos\\Media\\Domain\\Strategy\\AssetModelMappingStrategyInterface',
  'resourceManager' => 'Neos\\Flow\\ResourceManagement\\ResourceManager',
  'resourcesAlreadyConvertedToAssets' => 'array',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'reflectionService' => 'Neos\\Flow\\Reflection\\ReflectionService',
  'constructorReflectionFirstLevelCache' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Media\TypeConverter\ImageConverter') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\TypeConverter\ImageConverter', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->processingInstructionsConverter = new \Neos\Media\TypeConverter\ProcessingInstructionsConverter();
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Property\PropertyMapper', 'Neos\Flow\Property\PropertyMapper', 'propertyMapper', '2ab4a1ce2ee31715713d0f207f0ac637', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Property\PropertyMapper'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\AssetRepository', 'Neos\Media\Domain\Repository\AssetRepository', 'assetRepository', '45191f771a429c7decedb6fc0abbcc74', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\AssetRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Strategy\AssetModelMappingStrategyInterface', 'Neos\Media\Domain\Strategy\ConfigurationAssetModelMappingStrategy', 'assetModelMappingStrategy', 'b23095604be2f63a7f617ee8f8cf92d5', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Strategy\AssetModelMappingStrategyInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\ResourceManagement\ResourceManager', 'Neos\Flow\ResourceManagement\ResourceManager', 'resourceManager', '5c4c2fb284addde18c78849a54b02875', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ResourceManagement\ResourceManager'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\ObjectManagement\ObjectManagerInterface', 'Neos\Flow\ObjectManagement\ObjectManager', 'objectManager', '9524ff5e5332c1890aa361e5d186b7b6', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Reflection\ReflectionService', 'Neos\Flow\Reflection\ReflectionService', 'reflectionService', '464c26aa94c66579c050985566cbfc1f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Reflection\ReflectionService'); });
        $this->Flow_Injected_Properties = array (
  0 => 'processingInstructionsConverter',
  1 => 'propertyMapper',
  2 => 'assetRepository',
  3 => 'persistenceManager',
  4 => 'assetModelMappingStrategy',
  5 => 'resourceManager',
  6 => 'objectManager',
  7 => 'reflectionService',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Media/Classes/TypeConverter/ImageConverter.php
#