<?php 
namespace Neos\ContentRepository\Migration\Configuration;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Configuration\Source\YamlSource;
use Neos\Flow\Package\PackageInterface;
use Neos\Flow\Package\PackageManager;
use Neos\Utility\Files as Files;
use Neos\ContentRepository\Migration\Exception\MigrationException;

/**
 * Migration Configuration using YAML files.
 */
class YamlConfiguration_Original extends Configuration
{
    /**
     * @Flow\Inject
     * @var YamlSource
     */
    protected $yamlSourceImporter;

    /**
     * @Flow\Inject
     * @var PackageManager
     */
    protected $packageManager;

    /**
     * Loads a list of available versions into an array.
     *
     * @return array
     * @throws MigrationException
     */
    protected function registerAvailableVersions()
    {
        $this->availableVersions = [];
        foreach ($this->packageManager->getAvailablePackages() as $package) {
            $this->registerVersionInDirectory($package, 'TYPO3CR');
            $this->registerVersionInDirectory($package, 'ContentRepository');
        }
        ksort($this->availableVersions);
    }

    /**
     * @param PackageInterface $package
     * @param string $directoryName
     * @return void
     * @throws MigrationException
     */
    protected function registerVersionInDirectory(PackageInterface $package, string $directoryName)
    {
        $possibleMigrationsPath = Files::concatenatePaths([$package->getPackagePath(), 'Migrations', $directoryName]);
        if (!is_dir($possibleMigrationsPath)) {
            return;
        }
        $directoryIterator = new \DirectoryIterator($possibleMigrationsPath);
        foreach ($directoryIterator as $fileInfo) {
            $filename = $fileInfo->getFilename();
            if ($fileInfo->isFile() && $filename[0] !== '.' && (substr($filename, -5) === '.yaml')) {
                if (preg_match('/^Version[0-9]{14}.yaml$/', $filename) !== 1) {
                    throw new MigrationException('The migration file ' . $filename . ' is named wrong, expected format is "VersionYYYYMMDDHHmmss.yaml".', 1515752616);
                }
                $versionNumber = substr(substr($filename, 7), 0, -5);
                if (array_key_exists($versionNumber, $this->availableVersions)) {
                    throw new MigrationException('The migration version ' . $versionNumber . ' exists twice, that is not supported.', 1345823182);
                }
                $versionFile = Files::getUnixStylePath($fileInfo->getPathname());
                $this->availableVersions[$versionNumber] = [
                    'filePathAndName' => $versionFile,
                    'package' => $package,
                    'formattedVersionNumber' =>
                            // DD-MM-YYYY HH:MM:SS
                        $versionNumber[6] . $versionNumber[7] . '-' .
                        $versionNumber[4] . $versionNumber[5] . '-' .
                        $versionNumber[0] . $versionNumber[1] . $versionNumber[2] . $versionNumber[3] . ' ' .
                        $versionNumber[8] . $versionNumber[9] . ':' . $versionNumber[10] . $versionNumber[11] . ':' . $versionNumber[12] . $versionNumber[13]
                ];
            }
        }
    }

    /**
     * Loads a specific version into an array.
     *
     * @param string $version
     * @return array
     * @throws MigrationException
     */
    protected function loadConfiguration($version)
    {
        if (!$this->isVersionAvailable($version)) {
            throw new MigrationException('The requested YamlConfiguration was not available.', 1345822283);
        }

        $configuration = $this->yamlSourceImporter->load(substr($this->availableVersions[$version]['filePathAndName'], 0, -5));
        return $configuration;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Migration Configuration using YAML files.
 * @codeCoverageIgnore
 */
class YamlConfiguration extends YamlConfiguration_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\ContentRepository\Migration\Configuration\YamlConfiguration' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'yamlSourceImporter' => 'Neos\\Flow\\Configuration\\Source\\YamlSource',
  'packageManager' => 'Neos\\Flow\\Package\\PackageManager',
  'availableVersions' => 'array',
  'loadedVersions' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Configuration\Source\YamlSource', 'Neos\Flow\Configuration\Source\YamlSource', 'yamlSourceImporter', '4e81d02eaab2f307379618613fe4e33a', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Configuration\Source\YamlSource'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Package\PackageManager', 'Neos\Flow\Package\PackageManager', 'packageManager', '5969f0154592264b520c05738a0c9f97', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Package\PackageManager'); });
        $this->Flow_Injected_Properties = array (
  0 => 'yamlSourceImporter',
  1 => 'packageManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Migration/Configuration/YamlConfiguration.php
#