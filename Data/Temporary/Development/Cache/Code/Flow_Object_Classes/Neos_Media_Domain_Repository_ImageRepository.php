<?php 
declare(strict_types=1);

namespace Neos\Media\Domain\Repository;

/*
 * This file is part of the Neos.Media package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Doctrine\ORM\QueryBuilder;
use Neos\Flow\Annotations as Flow;
use Neos\Media\Domain\Model\ImageVariant;

/**
 * A repository for Images
 *
 * @Flow\Scope("singleton")
 */
class ImageRepository_Original extends AssetRepository
{
    /**
     * Return raw data about existing assets and their variants
     *
     * @return array
     */
    public function findAssetIdentifiersWithVariants(): array
    {
        /** @var QueryBuilder $queryBuilder */
        $assetIdentifiers = array_column($this->entityManager->createQuery(sprintf('SELECT i.Persistence_Object_Identifier  FROM %s i', $this->entityClassName))->getScalarResult(), 'Persistence_Object_Identifier');

        /** @var QueryBuilder $queryBuilder */
        $queryBuilder = $this->entityManager->createQueryBuilder();
        $queryBuilder
            ->select('IDENTITY(v.originalAsset) AS assetIdentifier, v.presetIdentifier, v.presetVariantName')
            ->from(ImageVariant::class, 'v');

        $rawVariantData = $queryBuilder->getQuery()->getArrayResult();

        $variantData = [];
        foreach ($rawVariantData as $item) {
            if (!isset($variantData[$item['assetIdentifier']])) {
                $variantData[$item['assetIdentifier']] = [];
            }
            if ($item['presetIdentifier']) {
                $variantData[$item['assetIdentifier']][$item['presetIdentifier']][$item['presetVariantName']] = true;
            }
        }

        $result = [];
        foreach ($assetIdentifiers as $assetIdentifier) {
            $result[$assetIdentifier] = $variantData[$assetIdentifier] ?? [];
        }

        return $result;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * A repository for Images
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ImageRepository extends ImageRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Initializes a new Repository.
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Media\Domain\Repository\ImageRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\Repository\ImageRepository', $this);
        parent::__construct();
        if ('Neos\Media\Domain\Repository\ImageRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'entityManager' => '\\Doctrine\\ORM\\EntityManagerInterface',
  'defaultOrderings' => 'array',
  'assetService' => 'Neos\\Media\\Domain\\Service\\AssetService',
  'reflectionService' => 'Neos\\Flow\\Reflection\\ReflectionService',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'entityClassName' => 'string',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Media\Domain\Repository\ImageRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\Repository\ImageRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Doctrine\ORM\EntityManagerInterface', 'Doctrine\ORM\EntityManagerInterface', 'entityManager', '68dcc38bb5d1acad752c62baff04cd05', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\ORM\EntityManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Service\AssetService', 'Neos\Media\Domain\Service\AssetService', 'assetService', 'b8a3f9ba29596737396943e4de630328', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Service\AssetService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Reflection\ReflectionService', 'Neos\Flow\Reflection\ReflectionService', 'reflectionService', '464c26aa94c66579c050985566cbfc1f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Reflection\ReflectionService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'entityManager',
  1 => 'assetService',
  2 => 'reflectionService',
  3 => 'persistenceManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Media/Classes/Domain/Repository/ImageRepository.php
#