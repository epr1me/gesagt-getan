<?php 
namespace Neos\Flow\Security;

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Mvc\ActionRequest;
use Neos\Flow\Security\Authentication\Token\SessionlessTokenInterface;

/**
 * @Flow\Scope("session")
 * @internal
 */
class SessionDataContainer_Original
{
    /**
     * The current list of security tokens.
     *
     * @var array
     */
    protected $securityTokens = [];

    /**
     * The current list of CSRF tokens
     *
     * @var array
     */
    protected $csrfProtectionTokens = [];

    /**
     * A possible request that was intercepted on a security exception
     *
     * @var ActionRequest|null
     */
    protected $interceptedRequest;

    /**
     * Get the current list of security tokens.
     *
     * @return array
     */
    public function getSecurityTokens(): array
    {
        return $this->securityTokens;
    }

    /**
     * Set the current list of security tokens with their data.
     *
     * @param array $securityTokens
     */
    public function setSecurityTokens(array $securityTokens)
    {
        foreach ($securityTokens as $token) {
            if ($token instanceof SessionlessTokenInterface) {
                throw new \InvalidArgumentException(sprintf('Tokens implementing the SessionlessTokenInterface must not be stored in the session. Got: %s', get_class($token)), 1562670555);
            }
        }
        $this->securityTokens = $securityTokens;
    }

    /**
     * Get the current list of active CSRF tokens.
     *
     * @return array
     */
    public function getCsrfProtectionTokens(): array
    {
        return $this->csrfProtectionTokens;
    }

    /**
     * set the list of currently active CSRF tokens.
     *
     * @param array $csrfProtectionTokens
     */
    public function setCsrfProtectionTokens(array $csrfProtectionTokens)
    {
        $this->csrfProtectionTokens = $csrfProtectionTokens;
    }

    /**
     * Get a possible saved request after a security exceptoin happeened.
     *
     * @return ActionRequest
     */
    public function getInterceptedRequest(): ?ActionRequest
    {
        return $this->interceptedRequest;
    }

    /**
     * Save a request that triggered a security exception.
     *
     * @param ActionRequest $interceptedRequest
     */
    public function setInterceptedRequest(ActionRequest $interceptedRequest = null): void
    {
        $this->interceptedRequest = $interceptedRequest;
    }

    /**
     * Reset data in this session container.
     */
    public function reset(): void
    {
        $this->setSecurityTokens([]);
        $this->setCsrfProtectionTokens([]);
        $this->setInterceptedRequest(null);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * @Flow\Scope("session")
 * @internal
 * @codeCoverageIgnore
 */
class SessionDataContainer extends SessionDataContainer_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\Aop\AdvicesTrait, \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;

    private $Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array();

    private $Flow_Aop_Proxy_groupedAdviceChains = array();

    private $Flow_Aop_Proxy_methodIsInAdviceMode = array();


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Flow\Security\SessionDataContainer') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\SessionDataContainer', $this);
    }

    /**
     * Autogenerated Proxy Method
     */
    protected function Flow_Aop_Proxy_buildMethodsAndAdvicesArray()
    {
        if (method_exists(get_parent_class(), 'Flow_Aop_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray')) parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray();

        $objectManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager;
        $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array(
            'getSecurityTokens' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'setSecurityTokens' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'getCsrfProtectionTokens' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'setCsrfProtectionTokens' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'getInterceptedRequest' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'setInterceptedRequest' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'reset' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
        );
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Flow\Security\SessionDataContainer') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Security\SessionDataContainer', $this);

        $this->Flow_setRelatedEntities();
            $result = NULL;
        if (method_exists(get_parent_class(), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __clone()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
    }

    /**
     * Autogenerated Proxy Method
     *
     * Get the current list of security tokens.
     *
     * @return array
     */
    public function getSecurityTokens() : array
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getSecurityTokens'])) {
            $result = parent::getSecurityTokens();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getSecurityTokens'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getSecurityTokens');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'getSecurityTokens', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getSecurityTokens']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getSecurityTokens']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * Set the current list of security tokens with their data.
     *
     * @param array $securityTokens
     */
    public function setSecurityTokens(array $securityTokens)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setSecurityTokens'])) {
            $result = parent::setSecurityTokens($securityTokens);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['setSecurityTokens'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['securityTokens'] = $securityTokens;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('setSecurityTokens');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'setSecurityTokens', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setSecurityTokens']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setSecurityTokens']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * Get the current list of active CSRF tokens.
     *
     * @return array
     */
    public function getCsrfProtectionTokens() : array
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getCsrfProtectionTokens'])) {
            $result = parent::getCsrfProtectionTokens();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getCsrfProtectionTokens'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getCsrfProtectionTokens');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'getCsrfProtectionTokens', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getCsrfProtectionTokens']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getCsrfProtectionTokens']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * set the list of currently active CSRF tokens.
     *
     * @param array $csrfProtectionTokens
     */
    public function setCsrfProtectionTokens(array $csrfProtectionTokens)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setCsrfProtectionTokens'])) {
            $result = parent::setCsrfProtectionTokens($csrfProtectionTokens);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['setCsrfProtectionTokens'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['csrfProtectionTokens'] = $csrfProtectionTokens;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('setCsrfProtectionTokens');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'setCsrfProtectionTokens', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setCsrfProtectionTokens']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setCsrfProtectionTokens']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * Get a possible saved request after a security exceptoin happeened.
     *
     * @return ActionRequest
     */
    public function getInterceptedRequest() : ?\Neos\Flow\Mvc\ActionRequest
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getInterceptedRequest'])) {
            $result = parent::getInterceptedRequest();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getInterceptedRequest'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getInterceptedRequest');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'getInterceptedRequest', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getInterceptedRequest']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getInterceptedRequest']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * Save a request that triggered a security exception.
     *
     * @param ActionRequest $interceptedRequest
     */
    public function setInterceptedRequest(?\Neos\Flow\Mvc\ActionRequest $interceptedRequest = NULL) : void
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setInterceptedRequest'])) {
            parent::setInterceptedRequest($interceptedRequest);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['setInterceptedRequest'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['interceptedRequest'] = $interceptedRequest;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('setInterceptedRequest');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'setInterceptedRequest', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setInterceptedRequest']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setInterceptedRequest']);
        }
    }

    /**
     * Autogenerated Proxy Method
     *
     * Reset data in this session container.
     */
    public function reset() : void
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['reset'])) {
            parent::reset();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['reset'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('reset');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Flow\Security\SessionDataContainer', 'reset', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['reset']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['reset']);
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'securityTokens' => 'array',
  'csrfProtectionTokens' => 'array',
  'interceptedRequest' => 'Neos\\Flow\\Mvc\\ActionRequest|null',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Security/SessionDataContainer.php
#