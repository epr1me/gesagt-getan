<?php 
namespace Neos\Fusion\Eel;

use Neos\Flow\Annotations as Flow;
use Neos\Eel\ProtectedContextAwareInterface;
use Neos\Flow\Http\BaseUriProvider;
use Neos\Flow\Http\Helper\RequestInformationHelper;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\UriInterface;

/**
 * This is a purely internal helper to provide baseUris for Caching.
 * It will be moved to a more sensible package in the future so do
 * not rely on the classname for now.
 *
 * @internal
 */
class BaseUriHelper_Original implements ProtectedContextAwareInterface
{
    /**
     * @Flow\Inject
     * @var BaseUriProvider
     */
    protected $baseUriProvider;

    /**
     * @param ServerRequestInterface|null $fallbackRequest
     * @return UriInterface
     * @throws \Exception
     */
    public function getConfiguredBaseUriOrFallbackToCurrentRequest(ServerRequestInterface $fallbackRequest = null): UriInterface
    {
        try {
            $baseUri = $this->baseUriProvider->getConfiguredBaseUriOrFallbackToCurrentRequest();
        } catch (\Exception $e) {
            // We are avoiding an exception here in favor of trying more fallback variants.
        }

        if (isset($baseUri)) {
            return $baseUri;
        }

        if ($fallbackRequest === null) {
            throw new \Exception('Could not determine baseUri for current process and no fallback HTTP request was given, maybe running in a CLI command.', 1581002260);
        }

        return RequestInformationHelper::generateBaseUri($fallbackRequest);
    }

    /**
     * @param string $methodName
     * @return bool
     */
    public function allowsCallOfMethod($methodName): bool
    {
        return true;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * This is a purely internal helper to provide baseUris for Caching.
 * It will be moved to a more sensible package in the future so do
 * not rely on the classname for now.
 *
 * @internal
 * @codeCoverageIgnore
 */
class BaseUriHelper extends BaseUriHelper_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\Fusion\Eel\BaseUriHelper' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'baseUriProvider' => 'Neos\\Flow\\Http\\BaseUriProvider',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Http\BaseUriProvider', 'Neos\Flow\Http\BaseUriProvider', 'baseUriProvider', '0a7b97cd721e82fff4b4dcf839cde0c3', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Http\BaseUriProvider'); });
        $this->Flow_Injected_Properties = array (
  0 => 'baseUriProvider',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Fusion/Classes/Eel/BaseUriHelper.php
#