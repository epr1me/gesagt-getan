<?php 
namespace Neos\Neos\EventLog\Integrations;

/*
 * This file is part of the Neos.Neos package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Event\OnFlushEventArgs;
use Neos\Eel\CompilingEvaluator;
use Neos\Eel\Exception;
use Neos\Eel\Utility;
use Neos\Flow\Annotations as Flow;
use Neos\Neos\EventLog\Domain\Model\Event;

/**
 * Monitors entity changes
 *
 * @Flow\Scope("singleton")
 */
class EntityIntegrationService_Original extends AbstractIntegrationService
{
    /**
     * Doctrine's Entity Manager.
     *
     * @Flow\Inject
     * @var EntityManagerInterface
     */
    protected $entityManager;

    /**
     * @Flow\Inject(lazy=false)
     * @var CompilingEvaluator
     */
    protected $eelEvaluator;

    /**
     * @Flow\InjectConfiguration("eventLog.monitorEntities")
     * @var array
     */
    protected $monitorEntitiesSetting;

    /**
     * Dummy method which is called in a prePersist signal. If we remove that, this object is never instantiated and thus
     * cannot hook into the Doctrine EntityManager.
     *
     * @return void
     */
    public function dummyMethodToEnsureInstanceExists()
    {
        // intentionally empty
    }

    /**
     * Record events for entity changes.
     *
     * Note: this method is registered as an Doctrine event listener in the settings of this package.
     *
     * TODO: Update/Delete of Entities
     *
     * @param OnFlushEventArgs $eventArgs
     * @return void
     * @throws Exception
     */
    public function onFlush(OnFlushEventArgs $eventArgs)
    {
        if (!$this->eventEmittingService->isEnabled()) {
            return;
        }

        $entityManager = $eventArgs->getEntityManager();
        $unitOfWork = $entityManager->getUnitOfWork();

        foreach ($unitOfWork->getScheduledEntityInsertions() as $entity) {
            $className = get_class($entity);
            if (isset($this->monitorEntitiesSetting[$className])) {
                $entityMonitoringConfiguration = $this->monitorEntitiesSetting[$className];

                if (isset($entityMonitoringConfiguration['events']['created'])) {
                    $data = [];
                    foreach ($entityMonitoringConfiguration['data'] as $key => $eelExpression) {
                        $data[$key] = Utility::evaluateEelExpression($eelExpression, $this->eelEvaluator, ['entity' => $entity]);
                    }

                    $event = $this->eventEmittingService->emit($entityMonitoringConfiguration['events']['created'], $data);
                    $unitOfWork->computeChangeSet($entityManager->getClassMetadata(Event::class), $event);
                }
            }
        }

        foreach ($unitOfWork->getScheduledEntityDeletions() as $entity) {
            $className = get_class($entity);
            if (isset($this->monitorEntitiesSetting[$className])) {
                $entityMonitoringConfiguration = $this->monitorEntitiesSetting[$className];

                if (isset($entityMonitoringConfiguration['events']['deleted'])) {
                    $data = [];
                    foreach ($entityMonitoringConfiguration['data'] as $key => $eelExpression) {
                        $data[$key] = Utility::evaluateEelExpression($eelExpression, $this->eelEvaluator, ['entity' => $entity]);
                    }

                    $event = $this->eventEmittingService->emit($entityMonitoringConfiguration['events']['deleted'], $data);
                    $unitOfWork->computeChangeSet($entityManager->getClassMetadata(Event::class), $event);
                }
            }
        }
    }

    /**
     * @param array $monitorEntitiesSetting
     * @return void
     */
    public function setMonitorEntitiesSetting($monitorEntitiesSetting)
    {
        $this->monitorEntitiesSetting = $monitorEntitiesSetting;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Monitors entity changes
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class EntityIntegrationService extends EntityIntegrationService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Neos\EventLog\Integrations\EntityIntegrationService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\EventLog\Integrations\EntityIntegrationService', $this);
        if ('Neos\Neos\EventLog\Integrations\EntityIntegrationService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'entityManager' => 'Doctrine\\ORM\\EntityManagerInterface',
  'eelEvaluator' => 'Neos\\Eel\\CompilingEvaluator',
  'monitorEntitiesSetting' => 'array',
  'eventEmittingService' => 'Neos\\Neos\\EventLog\\Domain\\Service\\EventEmittingService',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Neos\EventLog\Integrations\EntityIntegrationService') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\EventLog\Integrations\EntityIntegrationService', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Doctrine\ORM\EntityManagerInterface', 'Doctrine\ORM\EntityManagerInterface', 'entityManager', '68dcc38bb5d1acad752c62baff04cd05', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\ORM\EntityManagerInterface'); });
        $this->eelEvaluator = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Eel\CompilingEvaluator');
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\EventLog\Domain\Service\EventEmittingService', 'Neos\Neos\EventLog\Domain\Service\EventEmittingService', 'eventEmittingService', '5c51fbaaf43008ad76d5e80e333d9fcb', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\EventLog\Domain\Service\EventEmittingService'); });
        $this->setMonitorEntitiesSetting(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Neos.eventLog.monitorEntities'));
        $this->Flow_Injected_Properties = array (
  0 => 'entityManager',
  1 => 'eelEvaluator',
  2 => 'eventEmittingService',
  3 => 'monitorEntitiesSetting',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Neos/Classes/EventLog/Integrations/EntityIntegrationService.php
#