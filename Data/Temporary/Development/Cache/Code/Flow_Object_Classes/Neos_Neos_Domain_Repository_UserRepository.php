<?php 

namespace Neos\Neos\Domain\Repository;

/*
 * This file is part of the Neos.Neos package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\Doctrine\Repository;
use Neos\Flow\Persistence\QueryInterface;
use Neos\Flow\Persistence\QueryResultInterface;

/**
 * The User Repository
 *
 * @Flow\Scope("singleton")
 * @api
 */
class UserRepository_Original extends Repository
{

    /**
     * @return QueryResultInterface
     * @deprecated
     */
    public function findAllOrderedByUsername(): QueryResultInterface
    {
        return $this->findAllOrdered('accounts.accountIdentifier');
    }

    public function findAllOrdered(string $fieldName, string $sortDirection = QueryInterface::ORDER_ASCENDING): QueryResultInterface
    {
        $allowedFieldNames = ['accounts.accountIdentifier', 'accounts.lastSuccessfulAuthenticationDate', 'name.fullName'];

        if (!in_array($fieldName, $allowedFieldNames)) {
            throw new \InvalidArgumentException(sprintf('The field name "%s" is invalid, must be one of %s', $fieldName, implode(',', $allowedFieldNames)), 1651580413);
        }

        return $this->createQuery()
            ->setOrderings([$fieldName => $sortDirection])
            ->execute();
    }

    public function findBySearchTerm(string $searchTerm, string $sortBy, string $sortDirection): QueryResultInterface
    {
        try {
            $query = $this->createQuery();
            $query->matching(
                $query->logicalOr(
                    $query->like('accounts.accountIdentifier', '%' . $searchTerm . '%'),
                    $query->like('name.fullName', '%' . $searchTerm . '%')
                )
            );
            return $query->setOrderings([$sortBy => $sortDirection])->execute();
        } catch (\Neos\Flow\Persistence\Exception\InvalidQueryException $e) {
            throw new \RuntimeException($e->getMessage(), 1557767046, $e);
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * The User Repository
 *
 * @Flow\Scope("singleton")
 * @api
 * @codeCoverageIgnore
 */
class UserRepository extends UserRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Initializes a new Repository.
     *
     * @param EntityManagerInterface $entityManager The EntityManager to use.
     * @param ClassMetadata|null $classMetadata The class descriptor.
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'Neos\Neos\Domain\Repository\UserRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Domain\Repository\UserRepository', $this);

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\ORM\EntityManagerInterface');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $entityManager in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        parent::__construct(...$arguments);
        if ('Neos\Neos\Domain\Repository\UserRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'entityManager' => 'Doctrine\\ORM\\EntityManagerInterface',
  'objectType' => 'string',
  'defaultOrderings' => 'array',
  '_entityName' => 'string',
  '_em' => 'Doctrine\\ORM\\EntityManagerInterface',
  '_class' => 'Doctrine\\ORM\\Mapping\\ClassMetadata',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Neos\Domain\Repository\UserRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Domain\Repository\UserRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'persistenceManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Neos/Classes/Domain/Repository/UserRepository.php
#