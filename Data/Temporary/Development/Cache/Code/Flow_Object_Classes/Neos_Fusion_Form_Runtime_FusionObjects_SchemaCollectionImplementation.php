<?php 
declare(strict_types=1);

namespace Neos\Fusion\Form\Runtime\FusionObjects;

/*
 * This file is part of the Neos.Fusion.Form package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Error\Messages\Result;
use Neos\Fusion\Form\Runtime\Domain\SchemaInterface;

class SchemaCollectionImplementation_Original extends AbstractCollectionFusionObject implements SchemaInterface
{
    protected $itemInterface = SchemaInterface::class;

    protected $itemPrototype = 'Neos.Fusion.Form:Runtime.Schema';

    /**
     * @param mixed $data
     * @return mixed[]
     */
    public function convert($data): array
    {
        if (!is_array($data)) {
            throw new \InvalidArgumentException('The nested schema can only handle arrays');
        }
        $result = [];

        /**
         * @var SchemaInterface[] $subschemas
         */
        $subschemas = $this->getItems();

        foreach ($subschemas as $fieldName => $fieldSchema) {
            if ($fieldSchema instanceof SchemaInterface) {
                $fieldValue = $data[$fieldName] ?? null;
                $result[$fieldName] = $fieldSchema->convert($fieldValue);
            }
        }
        return $result;
    }

    /**
     * @param mixed $data
     * @return Result
     */
    public function validate($data): Result
    {
        if (!is_array($data)) {
            throw new \InvalidArgumentException('The nested schema can only handle arrays');
        }
        $result = new Result();

        /**
         * @var SchemaInterface[] $subschemas
         */
        $subschemas = $this->getItems();

        foreach ($subschemas as $fieldName => $fieldSchema) {
            if ($fieldSchema instanceof SchemaInterface) {
                $fieldValue = $data[$fieldName] ?? null;
                $result->forProperty($fieldName)->merge($fieldSchema->validate($fieldValue));
            }
        }
        return $result;
    }
}

#
# Start of Flow generated Proxy code
#

class SchemaCollectionImplementation extends SchemaCollectionImplementation_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructor
     *
     * @param Runtime $runtime
     * @param string $path
     * @param string $fusionObjectName
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Fusion\Core\Runtime');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $runtime in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(1, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $path in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(2, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $fusionObjectName in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'properties' => 'array',
  'ignoreProperties' => 'array',
  'runtime' => 'Neos\\Fusion\\Core\\Runtime',
  'path' => 'string',
  'fusionObjectName' => 'string',
  'fusionValueCache' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Fusion.Form/Classes/Runtime/FusionObjects/SchemaCollectionImplementation.php
#