<?php 
namespace Neos\Flow\Command;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Cli\CommandController;
use Neos\Flow\Mvc\Routing\Route;
use Neos\Utility\PositionalArraySorter;

/**
 * Command controller for PSR-15 (middleware) related commands
 */
class MiddlewareCommandController_Original extends CommandController
{
    /**
     * @Flow\InjectConfiguration(path="http.middlewares")
     * @var array
     */
    protected $chainConfiguration;

    /**
     * Lists all configured middleware components in the order they will be executed
     */
    public function listCommand(): void
    {
        $orderedChainConfiguration = new PositionalArraySorter($this->chainConfiguration);
        $this->outputLine('<b>Currently configured middlewares:</b>');
        $rows = [];
        $index = 0;
        /** @var Route $route */
        foreach ($orderedChainConfiguration->toArray() as $middlewareName => $middlewareConfiguration) {
            $rows[] = [
                '#' => ++ $index,
                'name' => $middlewareName,
                'className' => $middlewareConfiguration['middleware'],
            ];
        }
        $this->output->outputTable($rows, ['#', 'Name', 'Class name']);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Command controller for PSR-15 (middleware) related commands
 * @codeCoverageIgnore
 */
final class MiddlewareCommandController extends MiddlewareCommandController_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the command controller
     */
    public function __construct()
    {
        parent::__construct();
        if ('Neos\Flow\Command\MiddlewareCommandController' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'chainConfiguration' => 'array',
  'request' => 'Neos\\Flow\\Cli\\Request',
  'response' => 'Neos\\Flow\\Cli\\Response',
  'arguments' => 'Neos\\Flow\\Mvc\\Controller\\Arguments',
  'commandMethodName' => 'string',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'commandManager' => 'Neos\\Flow\\Cli\\CommandManager',
  'output' => 'Neos\\Flow\\Cli\\ConsoleOutput',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectCommandManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cli\CommandManager'));
        $this->injectObjectManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'));
        $this->chainConfiguration = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Flow.http.middlewares');
        $this->Flow_Injected_Properties = array (
  0 => 'commandManager',
  1 => 'objectManager',
  2 => 'chainConfiguration',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Command/MiddlewareCommandController.php
#