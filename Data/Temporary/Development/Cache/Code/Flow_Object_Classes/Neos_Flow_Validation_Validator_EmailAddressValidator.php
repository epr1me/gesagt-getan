<?php 
namespace Neos\Flow\Validation\Validator;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Egulias\EmailValidator\EmailValidator;
use Egulias\EmailValidator\Validation\DNSCheckValidation;
use Egulias\EmailValidator\Validation\MultipleValidationWithAnd;
use Egulias\EmailValidator\Validation\NoRFCWarningsValidation;
use Egulias\EmailValidator\Validation\RFCValidation;
use Neos\Flow\Annotations as Flow;

/**
 * Validator for email addresses
 *
 * @api
 * @Flow\Scope("singleton")
 */
class EmailAddressValidator_Original extends AbstractValidator
{
    /**
     * @var array
     */
    protected $supportedOptions = [
        'strict' => [false, 'Whether to fail validation on RFC warnings', 'bool'],
        'checkDns' => [false, 'Whether to use DNS checks', 'bool']
    ];

    /**
     * @var EmailValidator
     */
    protected $emailValidator;

    protected function initializeObject(): void
    {
        $this->emailValidator = new EmailValidator();
    }

    /**
     * Checks if the given value is a valid email address.
     *
     * @param mixed $value The value that should be validated
     * @return void
     * @api
     */
    protected function isValid($value)
    {
        if (!is_string($value) || !$this->validEmail($value)) {
            $this->addError('Please specify a valid email address.', 1221559976);
        }
    }

    /**
     * Checking syntax of input email address
     *
     * @param string $emailAddress Input string to evaluate
     * @return bool Returns true if the $email address (input string) is valid
     */
    protected function validEmail($emailAddress): bool
    {
        $rfcValidation = $this->options['strict'] ? new NoRFCWarningsValidation() : new RFCValidation();
        if ($this->options['checkDns']) {
            $mailValidation = new MultipleValidationWithAnd([$rfcValidation, new DNSCheckValidation()]);
        } else {
            $mailValidation = $rfcValidation;
        }

        return $this->emailValidator->isValid($emailAddress, $mailValidation);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Validator for email addresses
 *
 * @api
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class EmailAddressValidator extends EmailAddressValidator_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the validator and sets validation options
     *
     * @param array $options Options for the validator
     * @throws InvalidValidationOptionsException if unsupported options are found
     * @api
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'Neos\Flow\Validation\Validator\EmailAddressValidator') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Validation\Validator\EmailAddressValidator', $this);
        parent::__construct(...$arguments);

        $isSameClass = get_class($this) === 'Neos\Flow\Validation\Validator\EmailAddressValidator';
        if ($isSameClass) {
            $this->initializeObject(1);
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'supportedOptions' => 'array',
  'emailValidator' => 'Egulias\\EmailValidator\\EmailValidator',
  'acceptsEmptyValues' => 'boolean',
  'options' => 'array',
  'resultStack' => 'array<Neos\\Error\\Messages\\Result>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Flow\Validation\Validator\EmailAddressValidator') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Validation\Validator\EmailAddressValidator', $this);

        $this->Flow_setRelatedEntities();
            $result = NULL;

        $isSameClass = get_class($this) === 'Neos\Flow\Validation\Validator\EmailAddressValidator';
        $classParents = class_parents($this);
        $classImplements = class_implements($this);
        $isClassProxy = array_search('Neos\Flow\Validation\Validator\EmailAddressValidator', $classParents) !== false && array_search('Doctrine\Persistence\Proxy', $classImplements) !== false;

        if ($isSameClass || $isClassProxy) {
            $this->initializeObject(2);
        }
        return $result;
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Validation/Validator/EmailAddressValidator.php
#