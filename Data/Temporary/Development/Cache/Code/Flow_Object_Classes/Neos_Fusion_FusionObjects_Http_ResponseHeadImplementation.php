<?php 
namespace Neos\Fusion\FusionObjects\Http;

/*
 * This file is part of the Neos.Fusion package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Http\Helper\ResponseInformationHelper;
use Neos\Fusion\FusionObjects\AbstractFusionObject;
use Psr\Http\Message\ResponseFactoryInterface;
use Psr\Http\Message\ResponseInterface;

/**
 * Response Head generate a standard HTTP response head
 * @api
 */
class ResponseHeadImplementation_Original extends AbstractFusionObject
{
    /**
     * @Flow\Inject
     * @var ResponseFactoryInterface
     */
    protected $responseFactory;

    /**
     * Get HTTP protocol version
     *
     * @return string
     */
    public function getHttpVersion()
    {
        $httpVersion = $this->fusionValue('httpVersion');
        if ($httpVersion === null) {
            $httpVersion = 'HTTP/1.1';
        }
        return trim($httpVersion);
    }

    /**
     * @return integer
     */
    public function getStatusCode()
    {
        $statusCode = $this->fusionValue('statusCode');
        if ($statusCode === null) {
            $statusCode = 200;
        }
        if (ResponseInformationHelper::getStatusMessageByCode($statusCode) === 'Unknown Status') {
            throw new \InvalidArgumentException('Unknown HTTP status code', 1412085703);
        }
        return (integer)$statusCode;
    }

    /**
     * @return array
     */
    public function getHeaders(): array
    {
        $headers = $this->fusionValue('headers');
        if (!is_array($headers)) {
            $headers = [];
        }
        return $headers;
    }

    /**
     * Just return the processed value
     *
     * @return ResponseInterface
     */
    public function evaluate(): ResponseInterface
    {
        $httpVersion = $this->getHttpVersion();
        if (strpos($httpVersion, 'HTTP/') === 0) {
            $httpVersion = substr($httpVersion, 5);
        }

        $response = $this->responseFactory->createResponse($this->getStatusCode())->withProtocolVersion($httpVersion);
        foreach ($this->getHeaders() as $headerName => $headerValue) {
            $response = $response->withHeader($headerName, $headerValue);
        }
        return $response;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Response Head generate a standard HTTP response head
 * @api
 * @codeCoverageIgnore
 */
class ResponseHeadImplementation extends ResponseHeadImplementation_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructor
     *
     * @param Runtime $runtime
     * @param string $path
     * @param string $fusionObjectName
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Fusion\Core\Runtime');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $runtime in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(1, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $path in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(2, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $fusionObjectName in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
        if ('Neos\Fusion\FusionObjects\Http\ResponseHeadImplementation' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'responseFactory' => 'Psr\\Http\\Message\\ResponseFactoryInterface',
  'runtime' => 'Neos\\Fusion\\Core\\Runtime',
  'path' => 'string',
  'fusionObjectName' => 'string',
  'fusionValueCache' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->responseFactory = new \Neos\Http\Factories\ResponseFactory();
        $this->Flow_Injected_Properties = array (
  0 => 'responseFactory',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Fusion/Classes/FusionObjects/Http/ResponseHeadImplementation.php
#