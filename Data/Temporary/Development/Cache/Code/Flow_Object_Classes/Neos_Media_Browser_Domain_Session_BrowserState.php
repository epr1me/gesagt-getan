<?php 
namespace Neos\Media\Browser\Domain\Session;

/*
 * This file is part of the Neos.Media.Browser package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
  *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;

/**
 * A container for the state the media browser is in.
 *
 * @Flow\Scope("session")
 */
class BrowserState_Original
{
    /**
     * @var string
     */
    protected $activeAssetSourceIdentifier = 'neos';

    /**
     * @var array
     */
    protected $data = [];

    /**
     * Set a $value for $key
     *
     * @param string $key
     * @param mixed $value
     * @return void
     * @Flow\Session(autoStart = true)
     */
    public function set(string $key, $value)
    {
        if (!isset($this->data[$this->activeAssetSourceIdentifier])) {
            $this->initializeData($this->activeAssetSourceIdentifier);
        }
        $this->data[$this->activeAssetSourceIdentifier][$key] = $value;
    }

    /**
     * Return a value for $key.
     *
     * @param string $key
     * @return mixed
     */
    public function get(string $key)
    {
        if (!isset($this->data[$this->activeAssetSourceIdentifier])) {
            $this->initializeData($this->activeAssetSourceIdentifier);
        }
        return $this->data[$this->activeAssetSourceIdentifier][$key] ?? null;
    }

    /**
     * @return string
     */
    public function getActiveAssetSourceIdentifier(): string
    {
        return $this->activeAssetSourceIdentifier;
    }

    /**
     * @param string $activeAssetSourceIdentifier
     */
    public function setActiveAssetSourceIdentifier(string $activeAssetSourceIdentifier)
    {
        $this->activeAssetSourceIdentifier = $activeAssetSourceIdentifier;
    }

    /**
     * @param string $assetSourceIdentifier
     */
    private function initializeData(string $assetSourceIdentifier)
    {
        $this->data[$assetSourceIdentifier] = [
            'activeTag' => null,
            'view' => 'Thumbnail',
            'sortBy' => 'Modified',
            'sortDirection' => 'DESC',
            'filter' => 'All'
        ];
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * A container for the state the media browser is in.
 *
 * @Flow\Scope("session")
 * @codeCoverageIgnore
 */
class BrowserState extends BrowserState_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\Aop\AdvicesTrait, \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;

    private $Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array();

    private $Flow_Aop_Proxy_groupedAdviceChains = array();

    private $Flow_Aop_Proxy_methodIsInAdviceMode = array();


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Media\Browser\Domain\Session\BrowserState') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Browser\Domain\Session\BrowserState', $this);
    }

    /**
     * Autogenerated Proxy Method
     */
    protected function Flow_Aop_Proxy_buildMethodsAndAdvicesArray()
    {
        if (method_exists(get_parent_class(), 'Flow_Aop_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray')) parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray();

        $objectManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager;
        $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array(
            'set' => array(
                'Neos\Flow\Aop\Advice\BeforeAdvice' => array(
                    new \Neos\Flow\Aop\Advice\BeforeAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'initializeSession', $objectManager, NULL),
                ),
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'get' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'getActiveAssetSourceIdentifier' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
            'setActiveAssetSourceIdentifier' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Session\Aspect\LazyLoadingAspect', 'callMethodOnOriginalSessionObject', $objectManager, NULL),
                ),
            ),
        );
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if (get_class($this) === 'Neos\Media\Browser\Domain\Session\BrowserState') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Browser\Domain\Session\BrowserState', $this);

        $this->Flow_setRelatedEntities();
            $result = NULL;
        if (method_exists(get_parent_class(), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __clone()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
    }

    /**
     * Autogenerated Proxy Method
     *
     * Set a $value for $key
     *
     * @param string $key
     * @param mixed $value
     * @return void
     * @Flow\Session(autoStart = true)
     */
    public function set(string $key, $value)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['set'])) {
            $result = parent::set($key, $value);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['set'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['key'] = $key;
                $methodArguments['value'] = $value;
            
                if (isset($this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['set']['Neos\Flow\Aop\Advice\BeforeAdvice'])) {
                    $advices = $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices['set']['Neos\Flow\Aop\Advice\BeforeAdvice'];
                    $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Domain\Session\BrowserState', 'set', $methodArguments);
                    foreach ($advices as $advice) {
                        $advice->invoke($joinPoint);
                    }

                    $methodArguments = $joinPoint->getMethodArguments();
                }

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('set');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Domain\Session\BrowserState', 'set', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['set']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['set']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * Return a value for $key.
     *
     * @param string $key
     * @return mixed
     */
    public function get(string $key)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['get'])) {
            $result = parent::get($key);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['get'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['key'] = $key;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('get');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Domain\Session\BrowserState', 'get', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['get']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['get']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * @return string
     */
    public function getActiveAssetSourceIdentifier() : string
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getActiveAssetSourceIdentifier'])) {
            $result = parent::getActiveAssetSourceIdentifier();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['getActiveAssetSourceIdentifier'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('getActiveAssetSourceIdentifier');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Domain\Session\BrowserState', 'getActiveAssetSourceIdentifier', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getActiveAssetSourceIdentifier']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['getActiveAssetSourceIdentifier']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     *
     * @param string $activeAssetSourceIdentifier
     */
    public function setActiveAssetSourceIdentifier(string $activeAssetSourceIdentifier)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setActiveAssetSourceIdentifier'])) {
            $result = parent::setActiveAssetSourceIdentifier($activeAssetSourceIdentifier);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['setActiveAssetSourceIdentifier'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['activeAssetSourceIdentifier'] = $activeAssetSourceIdentifier;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('setActiveAssetSourceIdentifier');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Domain\Session\BrowserState', 'setActiveAssetSourceIdentifier', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setActiveAssetSourceIdentifier']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['setActiveAssetSourceIdentifier']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'activeAssetSourceIdentifier' => 'string',
  'data' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Media.Browser/Classes/Domain/Session/BrowserState.php
#