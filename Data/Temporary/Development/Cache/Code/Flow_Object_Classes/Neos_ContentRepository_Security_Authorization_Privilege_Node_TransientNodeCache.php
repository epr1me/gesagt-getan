<?php 

declare(strict_types=1);

namespace Neos\ContentRepository\Security\Authorization\Privilege\Node;

use Neos\ContentRepository\Domain\Model\NodeInterface;
use Neos\Flow\Annotations as Flow;

/**
 * Simple cache for nodes that is intended to be used in `NodePrivilegeContext`.
 *
 * WARNING: This cache may contain nodes that should not be visible to the current user.
 *          Only use this cache in `NodePrivilegeContext`.
 *
 * @Flow\Scope("singleton")
 */
class TransientNodeCache_Original
{

    /**
     * @var NodeInterface[]
     */
    private $nodes = [];

    /**
     * @param string $nodeIdentifier
     * @param callable $getter
     * @return NodeInterface
     */
    public function cache(string $nodeIdentifier, callable $getter): ?NodeInterface
    {
        if (array_key_exists($nodeIdentifier, $this->nodes)) {
            return $this->nodes[$nodeIdentifier];
        }

        $node = $getter();
        if ($node instanceof NodeInterface) {
            $this->nodes[$nodeIdentifier] = $node;
        }
        return $node;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Simple cache for nodes that is intended to be used in `NodePrivilegeContext`.
 *
 * WARNING: This cache may contain nodes that should not be visible to the current user.
 *          Only use this cache in `NodePrivilegeContext`.
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class TransientNodeCache extends TransientNodeCache_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\ContentRepository\Security\Authorization\Privilege\Node\TransientNodeCache') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\ContentRepository\Security\Authorization\Privilege\Node\TransientNodeCache', $this);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'nodes' => 'array<Neos\\ContentRepository\\Domain\\Model\\NodeInterface>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\ContentRepository\Security\Authorization\Privilege\Node\TransientNodeCache') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\ContentRepository\Security\Authorization\Privilege\Node\TransientNodeCache', $this);

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Security/Authorization/Privilege/Node/TransientNodeCache.php
#