<?php 
namespace Neos\ContentRepository\Security\Authorization\Privilege\Node;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Aop\JoinPointInterface;
use Neos\ContentRepository\Domain\Model\NodeInterface;
use Neos\ContentRepository\Domain\Model\NodeType;

/**
 * A create node privilege subject
 */
class CreateNodePrivilegeSubject_Original extends NodePrivilegeSubject
{
    /**
     * @var NodeType
     */
    protected $creationNodeType;

    /**
     * @param NodeInterface $node The parent node under which a new child shall be created
     * @param NodeType $creationNodeType The node type of the new child node, to check if this is type is allowed as new child node under the given parent node
     * @param JoinPointInterface $joinPoint Set, if created by a method interception. Usually the interception of the createNode() method, where the creation of new child nodes takes place
     */
    public function __construct(NodeInterface $node, NodeType $creationNodeType = null, JoinPointInterface $joinPoint = null)
    {
        $this->creationNodeType = $creationNodeType;
        parent::__construct($node, $joinPoint);
    }

    /**
     * @return boolean
     */
    public function hasCreationNodeType()
    {
        return ($this->creationNodeType !== null);
    }

    /**
     * @return NodeType
     */
    public function getCreationNodeType()
    {
        return $this->creationNodeType;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * A create node privilege subject
 * @codeCoverageIgnore
 */
class CreateNodePrivilegeSubject extends CreateNodePrivilegeSubject_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     *
     * @param NodeInterface $node The parent node under which a new child shall be created
     * @param NodeType $creationNodeType The node type of the new child node, to check if this is type is allowed as new child node under the given parent node
     * @param JoinPointInterface $joinPoint Set, if created by a method interception. Usually the interception of the createNode() method, where the creation of new child nodes takes place
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\ContentRepository\Domain\Model\NodeInterface');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $node in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'creationNodeType' => 'Neos\\ContentRepository\\Domain\\Model\\NodeType',
  'node' => 'Neos\\ContentRepository\\Domain\\Model\\NodeInterface',
  'joinPoint' => 'Neos\\Flow\\Aop\\JoinPointInterface',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Security/Authorization/Privilege/Node/CreateNodePrivilegeSubject.php
#