<?php 
namespace Neos\ContentRepository\Migration\Service;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Query\Expr;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\Doctrine\PersistenceManager;
use Neos\ContentRepository\Domain\Model\NodeData;
use Neos\ContentRepository\Domain\Repository\NodeDataRepository;
use Neos\Flow\Persistence\Doctrine\Query;

/**
 * Service that runs over all nodes and applies migrations to them as given by configuration.
 */
class NodeMigration_Original
{
    /**
     * @Flow\Inject
     * @var NodeDataRepository
     */
    protected $nodeDataRepository;

    /**
     * @Flow\Inject
     * @var NodeFilter
     */
    protected $nodeFilterService;

    /**
     * @Flow\Inject
     * @var NodeTransformation
     */
    protected $nodeTransformationService;

    /**
     * @Flow\Inject
     * @var PersistenceManager
     */
    protected $persistenceManager;

    /**
     * @Flow\Inject
     * @var EntityManagerInterface
     */
    protected $entityManager;

    /**
     * Migration configuration
     * @var array
     */
    protected $configuration = [];

    /**
     * @param array $configuration
     */
    public function __construct(array $configuration)
    {
        $this->configuration = $configuration;
    }

    /**
     * Execute all migrations
     *
     * @throws \Neos\ContentRepository\Migration\Exception\MigrationException
     * @throws \Neos\Flow\Persistence\Exception\IllegalObjectTypeException
     */
    public function execute()
    {
        foreach ($this->configuration as $migrationDescription) {
            /** array $migrationDescription */
            $this->executeSingle($migrationDescription);
        }
    }

    /**
     * Execute a single migration
     *
     * @param array $migrationDescription
     * @return void
     * @throws \Neos\ContentRepository\Migration\Exception\MigrationException
     * @throws \Neos\Flow\Persistence\Exception\IllegalObjectTypeException
     */
    protected function executeSingle(array $migrationDescription)
    {
        $filterExpressions = [];
        $baseQuery = new Query(NodeData::class);
        foreach ($this->nodeFilterService->getFilterExpressions($migrationDescription['filters'], $baseQuery) as $filterExpression) {
            $filterExpressions[] = $filterExpression;
        }

        $query = new Query(NodeData::class);
        if ($filterExpressions !== []) {
            $query->matching(call_user_func_array([new Expr(), 'andX'], $filterExpressions));
        }
        $iterator = $query->getQueryBuilder()->getQuery()->iterate();

        $processed = 0;
        foreach ($this->nodeDataRepository->iterate($iterator) as $node) {
            if ($this->nodeFilterService->matchFilters($node, $migrationDescription['filters'])) {
                $this->nodeTransformationService->execute($node, $migrationDescription['transformations']);

                if (!$this->nodeDataRepository->isInRemovedNodes($node)) {
                    $this->nodeDataRepository->update($node);
                }
            }

            if ($processed % 1000 === 0) {
                $this->persistenceManager->persistAll();
                $this->persistenceManager->clearState();
            }

            $processed++;
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Service that runs over all nodes and applies migrations to them as given by configuration.
 * @codeCoverageIgnore
 */
class NodeMigration extends NodeMigration_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * @param array $configuration
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $configuration in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
        if ('Neos\ContentRepository\Migration\Service\NodeMigration' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'nodeDataRepository' => 'Neos\\ContentRepository\\Domain\\Repository\\NodeDataRepository',
  'nodeFilterService' => 'Neos\\ContentRepository\\Migration\\Service\\NodeFilter',
  'nodeTransformationService' => 'Neos\\ContentRepository\\Migration\\Service\\NodeTransformation',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\Doctrine\\PersistenceManager',
  'entityManager' => 'Doctrine\\ORM\\EntityManagerInterface',
  'configuration' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\ContentRepository\Domain\Repository\NodeDataRepository', 'Neos\ContentRepository\Domain\Repository\NodeDataRepository', 'nodeDataRepository', '6d07985e92d364413ac81acd8f47b11b', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\ContentRepository\Domain\Repository\NodeDataRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\ContentRepository\Migration\Service\NodeFilter', 'Neos\ContentRepository\Migration\Service\NodeFilter', 'nodeFilterService', 'be29924ba354bc7d1f007e742e2b7af5', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\ContentRepository\Migration\Service\NodeFilter'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\ContentRepository\Migration\Service\NodeTransformation', 'Neos\ContentRepository\Migration\Service\NodeTransformation', 'nodeTransformationService', 'bc77f80e72396bb9b72da85cebdf717a', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\ContentRepository\Migration\Service\NodeTransformation'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\Doctrine\PersistenceManager', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '90135528ef7af4a013b4d45f90addf22', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\Doctrine\PersistenceManager'); });
        $this->Flow_Proxy_LazyPropertyInjection('Doctrine\ORM\EntityManagerInterface', 'Doctrine\ORM\EntityManagerInterface', 'entityManager', '68dcc38bb5d1acad752c62baff04cd05', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\ORM\EntityManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'nodeDataRepository',
  1 => 'nodeFilterService',
  2 => 'nodeTransformationService',
  3 => 'persistenceManager',
  4 => 'entityManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Migration/Service/NodeMigration.php
#