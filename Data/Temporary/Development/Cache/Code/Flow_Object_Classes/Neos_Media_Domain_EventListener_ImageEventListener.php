<?php 
namespace Neos\Media\Domain\EventListener;

/*
 * This file is part of the Neos.Media package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Doctrine\ORM\Event\LifecycleEventArgs;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Cache\CacheManager;
use Neos\Flow\ResourceManagement\PersistentResource;
use Neos\Media\Domain\Model\ImageInterface;

/**
 * Doctrine event listener for getting image size and type if needed
 *
 * @Flow\Scope("singleton")
 */
class ImageEventListener_Original
{
    /**
     * @var CacheManager
     * @Flow\Inject
     */
    protected $cacheManager;

    /**
     * @param LifecycleEventArgs $eventArgs
     * @return void
     */
    public function postRemove(LifecycleEventArgs $eventArgs)
    {
        $entity = $eventArgs->getEntity();
        if ($entity instanceof ImageInterface) {
            /** @var PersistentResource $resource */
            $resource = $eventArgs->getEntity()->getResource();
            if ($resource !== null) {
                $this->cacheManager->getCache('Neos_Media_ImageSize')->remove($resource->getCacheEntryIdentifier());
            }
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Doctrine event listener for getting image size and type if needed
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ImageEventListener extends ImageEventListener_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Media\Domain\EventListener\ImageEventListener') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\EventListener\ImageEventListener', $this);
        if ('Neos\Media\Domain\EventListener\ImageEventListener' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'cacheManager' => 'Neos\\Flow\\Cache\\CacheManager',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Media\Domain\EventListener\ImageEventListener') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\EventListener\ImageEventListener', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Cache\CacheManager', 'Neos\Flow\Cache\CacheManager', 'cacheManager', '0c52ee847923f7f71a81584e4050b3ca', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cache\CacheManager'); });
        $this->Flow_Injected_Properties = array (
  0 => 'cacheManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Media/Classes/Domain/EventListener/ImageEventListener.php
#