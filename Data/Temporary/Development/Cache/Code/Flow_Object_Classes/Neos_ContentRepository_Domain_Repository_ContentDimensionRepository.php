<?php 
namespace Neos\ContentRepository\Domain\Repository;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\ContentRepository\Domain\Model\ContentDimension;

/**
 * A repository for access to available content dimensions (from configuration)
 *
 * @Flow\Scope("singleton")
 */
class ContentDimensionRepository_Original
{
    /**
     * @var array
     */
    protected $dimensionsConfiguration = [];

    /**
     * Returns an array of content dimensions that are available in the system.
     *
     * @return array<\Neos\ContentRepository\Domain\Model\ContentDimension>
     */
    public function findAll()
    {
        $dimensions = [];
        foreach ($this->dimensionsConfiguration as $dimensionIdentifier => $dimensionConfiguration) {
            $dimensions[] = new ContentDimension($dimensionIdentifier, $dimensionConfiguration['default']);
        }
        return $dimensions;
    }

    /**
     * Set the content dimensions available in the system.
     *
     * @param array $dimensionsConfiguration
     * @return void
     */
    public function setDimensionsConfiguration(array $dimensionsConfiguration)
    {
        $this->dimensionsConfiguration = $dimensionsConfiguration;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * A repository for access to available content dimensions (from configuration)
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ContentDimensionRepository extends ContentDimensionRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\ContentRepository\Domain\Repository\ContentDimensionRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\ContentRepository\Domain\Repository\ContentDimensionRepository', $this);
        if ('Neos\ContentRepository\Domain\Repository\ContentDimensionRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'dimensionsConfiguration' => 'array',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\ContentRepository\Domain\Repository\ContentDimensionRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\ContentRepository\Domain\Repository\ContentDimensionRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->setDimensionsConfiguration(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.ContentRepository.contentDimensions'));
        $this->Flow_Injected_Properties = array (
  0 => 'dimensionsConfiguration',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.ContentRepository/Classes/Domain/Repository/ContentDimensionRepository.php
#