<?php 
declare(strict_types=1);

namespace Neos\FluidAdaptor\Core\Widget;

/*
 * This file is part of the Neos.FluidAdaptor package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Mvc\ActionRequestFactory;
use Neos\Flow\Mvc\ActionResponse;
use Neos\Flow\Mvc\Dispatcher;
use Neos\Flow\Security\Context;
use Neos\Flow\Security\Cryptography\HashService;
use Neos\Utility\Arrays;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * A HTTP middleware specifically for Ajax widgets
 * It's task is to interrupt the default dispatching as soon as possible if the current request is an AJAX request
 * triggered by a Fluid widget (e.g. contains the arguments "__widgetId" or "__widgetContext").
 */
class AjaxWidgetMiddleware_Original implements MiddlewareInterface
{
    /**
     * @Flow\Inject
     * @var ActionRequestFactory
     */
    protected $actionRequestFactory;

    /**
     * @Flow\Inject
     * @var HashService
     */
    protected $hashService;

    /**
     * @Flow\Inject
     * @var AjaxWidgetContextHolder
     */
    protected $ajaxWidgetContextHolder;

    /**
     * @Flow\Inject
     * @var Context
     */
    protected $securityContext;

    /**
     * @Flow\Inject
     * @var Dispatcher
     */
    protected $dispatcher;

    /**
     * Check if the current request contains a widget context.
     * If so dispatch it directly, otherwise continue with the next HTTP component.
     *
     * @param ServerRequestInterface $httpRequest
     * @param RequestHandlerInterface $next
     * @return ResponseInterface
     */
    public function process(ServerRequestInterface $httpRequest, RequestHandlerInterface $next): ResponseInterface
    {
        $widgetContext = $this->extractWidgetContext($httpRequest);
        if ($widgetContext === null) {
            return $next->handle($httpRequest);
        }

        $actionRequest = $this->actionRequestFactory->createActionRequest($httpRequest, ['__widgetContext' => $widgetContext]);
        $actionRequest->setControllerObjectName($widgetContext->getControllerObjectName());
        $this->securityContext->setRequest($actionRequest);

        $actionResponse = new ActionResponse();

        $this->dispatcher->dispatch($actionRequest, $actionResponse);

        return $actionResponse->buildHttpResponse();
    }

    /**
     * Extracts the WidgetContext from the given $httpRequest.
     * If the request contains an argument "__widgetId" the context is fetched from the session (AjaxWidgetContextHolder).
     * Otherwise the argument "__widgetContext" is expected to contain the serialized WidgetContext (protected by a HMAC suffix)
     *
     * @param ServerRequestInterface $httpRequest
     * @return WidgetContext
     * @throws Exception\WidgetContextNotFoundException
     * @throws \Neos\Flow\Security\Exception\InvalidArgumentForHashGenerationException
     * @throws \Neos\Flow\Security\Exception\InvalidHashException
     */
    protected function extractWidgetContext(ServerRequestInterface $httpRequest):? WidgetContext
    {
        $arguments = $httpRequest->getQueryParams();
        $parsedBody  = $httpRequest->getParsedBody();
        if (is_array($parsedBody)) {
            $arguments = Arrays::arrayMergeRecursiveOverrule($arguments, $parsedBody);
        }
        if (isset($arguments['__widgetId'])) {
            return $this->ajaxWidgetContextHolder->get($arguments['__widgetId']);
        }

        if (isset($arguments['__widgetContext'])) {
            $serializedWidgetContextWithHmac = $arguments['__widgetContext'];
            $serializedWidgetContext = $this->hashService->validateAndStripHmac($serializedWidgetContextWithHmac);
            return unserialize(base64_decode($serializedWidgetContext));
        }

        return null;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * A HTTP middleware specifically for Ajax widgets
 * It's task is to interrupt the default dispatching as soon as possible if the current request is an AJAX request
 * triggered by a Fluid widget (e.g. contains the arguments "__widgetId" or "__widgetContext").
 * @codeCoverageIgnore
 */
class AjaxWidgetMiddleware extends AjaxWidgetMiddleware_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\FluidAdaptor\Core\Widget\AjaxWidgetMiddleware' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'actionRequestFactory' => 'Neos\\Flow\\Mvc\\ActionRequestFactory',
  'hashService' => 'Neos\\Flow\\Security\\Cryptography\\HashService',
  'ajaxWidgetContextHolder' => 'Neos\\FluidAdaptor\\Core\\Widget\\AjaxWidgetContextHolder',
  'securityContext' => 'Neos\\Flow\\Security\\Context',
  'dispatcher' => 'Neos\\Flow\\Mvc\\Dispatcher',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->actionRequestFactory = new \Neos\Flow\Mvc\ActionRequestFactory();
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Security\Cryptography\HashService', 'Neos\Flow\Security\Cryptography\HashService', 'hashService', '62d57ff7e7ce903303c867dd468c12fd', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\Cryptography\HashService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\FluidAdaptor\Core\Widget\AjaxWidgetContextHolder', 'Neos\FluidAdaptor\Core\Widget\AjaxWidgetContextHolder', 'ajaxWidgetContextHolder', 'fabd70eb16d8fd20020f08cd84690d4b', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\FluidAdaptor\Core\Widget\AjaxWidgetContextHolder'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Security\Context', 'Neos\Flow\Security\Context', 'securityContext', 'f7e2ddeaebd191e228b8c2e4dc7f1f83', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\Context'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Mvc\Dispatcher', 'Neos\Flow\Mvc\Dispatcher', 'dispatcher', '8ddded8be27664ffb31ad6b8c6b2be64', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Mvc\Dispatcher'); });
        $this->Flow_Injected_Properties = array (
  0 => 'actionRequestFactory',
  1 => 'hashService',
  2 => 'ajaxWidgetContextHolder',
  3 => 'securityContext',
  4 => 'dispatcher',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.FluidAdaptor/Classes/Core/Widget/AjaxWidgetMiddleware.php
#