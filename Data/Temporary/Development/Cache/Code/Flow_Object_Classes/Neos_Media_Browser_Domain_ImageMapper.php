<?php 
namespace Neos\Media\Browser\Domain;

use Neos\Flow\Persistence\PersistenceManagerInterface;
use Neos\Flow\ResourceManagement\ResourceManager;
use Neos\Media\Domain\Model\Adjustment\CropImageAdjustment;
use Neos\Media\Domain\Model\ImageInterface;
use Neos\Media\Domain\Model\ImageVariant;

/**
 * The ImageMapper provides basic information about an image object as array of simple types.
 */
class ImageMapper_Original
{
    /**
     * The image to be mapped.
     *
     * @var ImageInterface
     */
    private $image;

    /**
     * @var array
     */
    private $mappingResult = [];

    /**
     * @var ResourceManager
     */
    private $resourceManager;

    /**
     * @var PersistenceManagerInterface
     */
    private $persistenceManager;

    /**
     * @param ResourceManager $resourceManager
     */
    public function injectResourceManager(ResourceManager $resourceManager)
    {
        $this->resourceManager = $resourceManager;
    }

    /**
     * @param PersistenceManagerInterface $persistenceManager
     */
    public function injectPersistenceManager(PersistenceManagerInterface $persistenceManager)
    {
        $this->persistenceManager = $persistenceManager;
    }

    /**
     * ImageMapper constructor.
     *
     * @param ImageInterface $image
     */
    public function __construct(ImageInterface $image)
    {
        $this->image = $image;
    }

    public function initializeObject()
    {
        $mappingResult = $this->mapImage();
        if ($this->image instanceof ImageVariant) {
            $mappingResult = array_merge($mappingResult, $this->mapVariant($this->image));
        }

        $this->mappingResult = $mappingResult;
        $this->image = null;
    }

    /**
     * @return array
     */
    public function getMappingResult(): array
    {
        return $this->mappingResult;
    }

    /**
     * Map the image object attached to this mapper to basic properties.
     *
     * @return array
     */
    private function mapImage(): array
    {
        $previewUri = $this->resourceManager->getPublicPersistentResourceUri($this->image->getResource());

        return [
            'previewUri' => $previewUri,
            'width' => $this->image->getWidth(),
            'height' => $this->image->getHeight(),
            'persistenceIdentifier' => $this->persistenceManager->getIdentifierByObject($this->image)
        ];
    }

    /**
     * @param ImageVariant $imageVariant
     * @return array
     */
    private function mapVariant(ImageVariant $imageVariant): array
    {
        $variantInformation = [
            'presetIdentifier' => $imageVariant->getPresetIdentifier(),
            'presetVariantName' => $imageVariant->getPresetVariantName(),
            'hasCrop' => false,
            'cropInformation' => []
        ];

        foreach ($imageVariant->getAdjustments() as $adjustment) {
            if ($adjustment instanceof CropImageAdjustment) {
                $variantInformation = array_merge($variantInformation, $this->mapCrop($imageVariant, $adjustment));
            }
        }

        return $variantInformation;
    }

    /**
     * Map crop information for user interface.
     *
     * @param ImageVariant $imageVariant
     * @param CropImageAdjustment $adjustment
     * @return array
     */
    private function mapCrop(ImageVariant $imageVariant, CropImageAdjustment $adjustment)
    {
        $variantInformation['hasCrop'] = true;
        $variantInformation['cropInformation'] = [
            'width' => $adjustment->getWidth(),
            'height' => $adjustment->getHeight(),
            'x' => $adjustment->getX(),
            'y' => $adjustment->getY(),
        ];

        $aspectRatio = $adjustment->getAspectRatio();
        if ($aspectRatio !== null) {
            [$x, $y, $width, $height] = CropImageAdjustment::calculateDimensionsByAspectRatio($imageVariant->getOriginalAsset()->getWidth(), $imageVariant->getOriginalAsset()->getHeight(), $aspectRatio);
            $variantInformation['cropInformation'] = [
                'width' => $width,
                'height' => $height,
                'x' => $x,
                'y' => $y,
            ];
        }

        return $variantInformation;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * The ImageMapper provides basic information about an image object as array of simple types.
 * @codeCoverageIgnore
 */
class ImageMapper extends ImageMapper_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * ImageMapper constructor.
     *
     * @param ImageInterface $image
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Model\ImageInterface');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $image in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
        if ('Neos\Media\Browser\Domain\ImageMapper' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }

        $isSameClass = get_class($this) === 'Neos\Media\Browser\Domain\ImageMapper';
        if ($isSameClass) {
            $this->initializeObject(1);
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'image' => 'Neos\\Media\\Domain\\Model\\ImageInterface',
  'mappingResult' => 'array',
  'resourceManager' => 'Neos\\Flow\\ResourceManagement\\ResourceManager',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
            $result = NULL;

        $isSameClass = get_class($this) === 'Neos\Media\Browser\Domain\ImageMapper';
        $classParents = class_parents($this);
        $classImplements = class_implements($this);
        $isClassProxy = array_search('Neos\Media\Browser\Domain\ImageMapper', $classParents) !== false && array_search('Doctrine\Persistence\Proxy', $classImplements) !== false;

        if ($isSameClass || $isClassProxy) {
            $this->initializeObject(2);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectResourceManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ResourceManagement\ResourceManager'));
        $this->injectPersistenceManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'));
        $this->Flow_Injected_Properties = array (
  0 => 'resourceManager',
  1 => 'persistenceManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Application/Neos.Media.Browser/Classes/Domain/ImageMapper.php
#