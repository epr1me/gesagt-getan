<?php 
declare(strict_types=1);

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

namespace Neos\Flow\Cache;

use Neos\Cache\Exception\NoSuchCacheException;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Configuration\ConfigurationManager;
use Neos\Flow\Reflection\ReflectionService;
use Neos\Flow\Log\Utility\LogEnvironment;
use Psr\Log\LoggerInterface;

/**
 * @Flow\Scope("singleton")
 */
class AnnotationsCacheFlusher_Original
{
    /**
     * @Flow\Inject
     * @var LoggerInterface
     */
    protected $logger;

    /**
     * @Flow\Inject
     * @var ConfigurationManager
     */
    protected $configurationManager;

    /**
     * @Flow\Inject
     * @var CacheManager
     */
    protected $cacheManager;

    /**
     * The ReflectionService is only needed during compile time for handling flushConfigurationCachesByCompiledClass
     *
     * @Flow\Inject
     * @var ReflectionService
     */
    protected $reflectionService;

    /**
     * Caches to flush for a given annotation
     *
     * @var array in the format [<AnnotationClassName> => [<CacheName_1>, <CacheName_2>]]
     */
    private $annotationToCachesMap = [];

    /**
     * Register an annotation that should trigger a cache flush
     *
     * @param string $annotationClassName fully qualified class name of the annotation
     * @param string[] $cacheNames Cache names to flush if a class containing the given annotation is compiled (e.g. ["Flow_Mvc_Routing_Route", Flow_Mvc_Routing_Resolve"])
     */
    public function registerAnnotation(string $annotationClassName, array $cacheNames): void
    {
        $this->annotationToCachesMap[$annotationClassName] = $cacheNames;
    }

    /**
     * A slot that flushes caches as needed if classes with specific annotations have changed @see registerAnnotation()
     *
     * @param array<string> $classNames The full class names of the classes that got compiled
     * @return void
     * @throws NoSuchCacheException
     */
    public function flushConfigurationCachesByCompiledClass(array $classNames): void
    {
        if ($this->annotationToCachesMap === []) {
            return;
        }
        $cachesToFlush = [];
        foreach ($classNames as $className) {
            foreach ($this->annotationToCachesMap as $annotationClass => $cacheNames) {
                if (!$this->reflectionService->isClassAnnotatedWith($className, $annotationClass)
                    && count($this->reflectionService->getMethodsAnnotatedWith($className, $annotationClass)) === 0) {
                    continue;
                }
                foreach ($cacheNames as $cacheName) {
                    $cachesToFlush[$cacheName] = $annotationClass;
                }
            }
        }

        foreach ($cachesToFlush as $cacheName => $annotationClass) {
            $this->logger->info(sprintf('A class file containing the annotation "%s" has been changed, flushing related cache "%s"', $annotationClass, $cacheName), LogEnvironment::fromMethodName(__METHOD__));
            $this->cacheManager->getCache($cacheName)->flush();
        }

        if (count($cachesToFlush) > 0) {
            $this->logger->info('An annotated class file has been changed, refreshing compiled configuration cache', LogEnvironment::fromMethodName(__METHOD__));
            $this->configurationManager->refreshConfiguration();
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
final class AnnotationsCacheFlusher extends AnnotationsCacheFlusher_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Flow\Cache\AnnotationsCacheFlusher') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Cache\AnnotationsCacheFlusher', $this);
        if ('Neos\Flow\Cache\AnnotationsCacheFlusher' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'logger' => 'Psr\\Log\\LoggerInterface',
  'configurationManager' => 'Neos\\Flow\\Configuration\\ConfigurationManager',
  'cacheManager' => 'Neos\\Flow\\Cache\\CacheManager',
  'reflectionService' => 'Neos\\Flow\\Reflection\\ReflectionService',
  'annotationToCachesMap' => 'array in the format [<AnnotationClassName> => [>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Flow\Cache\AnnotationsCacheFlusher') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Cache\AnnotationsCacheFlusher', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Psr\Log\LoggerInterface', 'Psr\Log\LoggerInterface', 'logger', '4ecd65bb9ffe02221f8576f7ca2cf401', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Psr\Log\LoggerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Configuration\ConfigurationManager', 'Neos\Flow\Configuration\ConfigurationManager', 'configurationManager', 'f559bc775c41b957515dc1c69b91d8b1', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Configuration\ConfigurationManager'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Cache\CacheManager', 'Neos\Flow\Cache\CacheManager', 'cacheManager', '0c52ee847923f7f71a81584e4050b3ca', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cache\CacheManager'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Reflection\ReflectionService', 'Neos\Flow\Reflection\ReflectionService', 'reflectionService', '464c26aa94c66579c050985566cbfc1f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Reflection\ReflectionService'); });
        $this->Flow_Injected_Properties = array (
  0 => 'logger',
  1 => 'configurationManager',
  2 => 'cacheManager',
  3 => 'reflectionService',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Cache/AnnotationsCacheFlusher.php
#