<?php 
declare(strict_types=1);

namespace Neos\Flow\Command;

/*
 * This file is part of the Neos.Flow package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Cli\CommandController;
use Neos\Flow\SignalSlot\Dispatcher;

/**
 * Signal command controller for the Neos.Flow package
 *
 * @Flow\Scope("singleton")
 */
class SignalCommandController_Original extends CommandController
{
    /**
     * @Flow\Inject
     * @var Dispatcher
     */
    protected $dispatcher;

    /**
     * Lists all connected signals with their slots.
     *
     * @param string $className if specified, only signals matching the given fully qualified class name will be shown. Note: escape namespace separators or wrap the value in quotes, e.g. "--class-name Neos\\Flow\\Core\\Bootstrap".
     * @param string $methodName if specified, only signals matching the given method name will be shown. This is only useful in conjunction with the "--class-name" option.
     * @return void
     */
    public function listConnectedCommand(string $className = null, string $methodName = null): void
    {
        $this->outputFormatted('<b>Connected signals with their slots.</b>');
        $this->outputLine();

        $connectedSignals = $this->dispatcher->getSignals();
        foreach ($connectedSignals as $signalClassName => $signalsByClass) {
            if ($className !== null && $signalClassName !== $className) {
                continue;
            }

            $this->outputFormatted('<b>%s</b>', [$signalClassName]);
            foreach ($signalsByClass as $signalMethodName => $slots) {
                if ($methodName !== null && $signalMethodName !== $methodName) {
                    continue;
                }

                $this->outputFormatted('<b>%s</b>', [$signalMethodName], 2);
                foreach ($slots as $slot) {
                    $slotClassName = $slot['class'];
                    $slotMethodName = $slot['method'];

                    if ($slotClassName !== null) {
                        $this->outputFormatted('%s::%s', [$slotClassName, $slotMethodName], 4);
                    } else {
                        $this->outputFormatted('<i>Closure</i>', [], 4);
                    }
                }
            }
            $this->outputLine();
        }
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Signal command controller for the Neos.Flow package
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class SignalCommandController extends SignalCommandController_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the command controller
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Flow\Command\SignalCommandController') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Command\SignalCommandController', $this);
        parent::__construct();
        if ('Neos\Flow\Command\SignalCommandController' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'dispatcher' => 'Neos\\Flow\\SignalSlot\\Dispatcher',
  'request' => 'Neos\\Flow\\Cli\\Request',
  'response' => 'Neos\\Flow\\Cli\\Response',
  'arguments' => 'Neos\\Flow\\Mvc\\Controller\\Arguments',
  'commandMethodName' => 'string',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'commandManager' => 'Neos\\Flow\\Cli\\CommandManager',
  'output' => 'Neos\\Flow\\Cli\\ConsoleOutput',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Flow\Command\SignalCommandController') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Flow\Command\SignalCommandController', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectCommandManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cli\CommandManager'));
        $this->injectObjectManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'));
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\SignalSlot\Dispatcher', 'Neos\Flow\SignalSlot\Dispatcher', 'dispatcher', '318bf3ee657fa67e7c62753f1b92bd5f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\SignalSlot\Dispatcher'); });
        $this->Flow_Injected_Properties = array (
  0 => 'commandManager',
  1 => 'objectManager',
  2 => 'dispatcher',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Command/SignalCommandController.php
#