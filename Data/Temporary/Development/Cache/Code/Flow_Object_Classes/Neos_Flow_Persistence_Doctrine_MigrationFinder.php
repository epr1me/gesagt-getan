<?php 
declare(strict_types=1);

namespace Neos\Flow\Persistence\Doctrine;

use Doctrine\Migrations\Finder\Finder;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Package\PackageManager;
use Neos\Utility\Files;

/**
 * The GlobFinder class finds migrations in a directory using the PHP glob() function.
 */
class MigrationFinder_Original extends Finder
{

    /**
     * @Flow\Inject
     * @var PackageManager
     */
    protected $packageManager;

    /**
     * @var string
     */
    protected $databasePlatformName;

    public function __construct(string $databasePlatformName)
    {
        $this->databasePlatformName = $databasePlatformName;
    }

    /**
     * @param string $directory
     * @param string|null $namespace
     * @return string[]
     */
    public function findMigrations(string $directory, ?string $namespace = null): array
    {
        $files = [];

        foreach ($this->packageManager->getAvailablePackages() as $package) {
            $path = Files::concatenatePaths([
                $package->getPackagePath(),
                'Migrations',
                $this->databasePlatformName
            ]);
            if (is_dir($path)) {
                $files[] = glob($path . '/Version*.php');
            }
        }

        $files = array_merge([], ...$files); // the empty array covers cases when no loops were made

        return $this->loadMigrations($files, $namespace);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * The GlobFinder class finds migrations in a directory using the PHP glob() function.
 * @codeCoverageIgnore
 */
final class MigrationFinder extends MigrationFinder_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $databasePlatformName in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
        if ('Neos\Flow\Persistence\Doctrine\MigrationFinder' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'packageManager' => 'Neos\\Flow\\Package\\PackageManager',
  'databasePlatformName' => 'string',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Package\PackageManager', 'Neos\Flow\Package\PackageManager', 'packageManager', '5969f0154592264b520c05738a0c9f97', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Package\PackageManager'); });
        $this->Flow_Injected_Properties = array (
  0 => 'packageManager',
);
    }
}
# PathAndFilename: /Applications/MAMP/htdocs/neos-example/Packages/Framework/Neos.Flow/Classes/Persistence/Doctrine/MigrationFinder.php
#